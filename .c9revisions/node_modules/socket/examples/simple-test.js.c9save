{"ts":1351478449800,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//    (The MIT License)\n//\n//    Copyright (c) 2012 Richard S Allinson <rsa@mountainmansoftware.com>\n//\n//    Permission is hereby granted, free of charge, to any person obtaining\n//    a copy of this software and associated documentation files (the\n//    'Software'), to deal in the Software without restriction, including\n//    without limitation the rights to use, copy, modify, merge, publish,\n//    distribute, sublicense, and/or sell copies of the Software, and to\n//    permit persons to whom the Software is furnished to do so, subject to\n//    the following conditions:\n//\n//    The above copyright notice and this permission notice shall be\n//    included in all copies or substantial portions of the Software.\n//\n//    THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n//    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n//    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n//    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n//    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n//    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n//    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar socket = require('../lib'),\n    net = require('net'),\n    microtime = require('microtime'),\n    port = 8080,\n    app,\n    repeat = 1000,\n    count = repeat,\n    start = microtime.now(),\n    i;\n\napp = socket.createServer(\n    socket.profiler(),\n    socket.echo()\n).listen(port);\n\nconsole.log('Knot Server Started');\n\nfunction test(port, ip, obj, callback) {\n    var buffer = '',\n        client;\n\n    client = net.connect(port, ip, function () {\n        client.write(JSON.stringify(obj) + app.TERM);\n    });\n    client.on('data', function (data) {\n        buffer += data;\n    });\n    client.on('end', function () {\n        var data;\n        try {\n            data = JSON.parse(buffer);\n        } catch (e) {\n            data = {error: 'bad json parse'};\n        }\n        callback(data);\n    });\n}\n\nfunction log(msg) {\n    count = count - 1;\n    if (!count) {\n        console.log('Total: ' + ((microtime.now() - start) / 1000000) + 'sec (' + repeat + ' requests)');\n        process.exit();\n    } else {\n        console.log(msg);\n    }\n}\n\nfor (i = 0; i < count; i = i + 1) {\n    test(port, 'localhost', {num: i}, log);\n}"]],"start1":0,"start2":0,"length1":0,"length2":2364}]],"length":2364}
