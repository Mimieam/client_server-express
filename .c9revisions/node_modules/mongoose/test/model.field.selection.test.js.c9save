{"ts":1352713335711,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Test dependencies.\n */\n\nvar start = require('./common')\n  , assert = require('assert')\n  , mongoose = start.mongoose\n  , random = require('../lib/utils').random\n  , Query = require('../lib/query')\n  , Schema = mongoose.Schema\n  , SchemaType = mongoose.SchemaType\n  , CastError = SchemaType.CastError\n  , ObjectId = Schema.ObjectId\n  , MongooseBuffer = mongoose.Types.Buffer\n  , DocumentObjectId = mongoose.Types.ObjectId;\n\n/**\n * Setup.\n */\n\nvar Comments = new Schema;\n\nComments.add({\n    title     : String\n  , date      : Date\n  , body      : String\n  , comments  : [Comments]\n});\n\nvar BlogPostB = new Schema({\n    title     : String\n  , author    : String\n  , slug      : String\n  , date      : Date\n  , meta      : {\n        date      : Date\n      , visitors  : Number\n    }\n  , published : Boolean\n  , mixed     : {}\n  , numbers   : [Number]\n  , tags      : [String]\n  , sigs      : [Buffer]\n  , owners    : [ObjectId]\n  , comments  : [Comments]\n  , def       : { type: String, default: 'kandinsky' }\n});\n\nvar modelName = 'model.select.blogpost';\nmongoose.model(modelName, BlogPostB);\nvar collection = 'blogposts_' + random();\n\ndescribe('model field selection', function(){\n  it('excluded fields should be undefined', function(done){\n    var db = start()\n      , BlogPostB = db.model(modelName, collection)\n      , date = new Date\n\n    var doc = {\n        title: 'subset 1'\n      , author: 'me'\n      , comments: [{ title: 'first comment', date: new Date }, { title: '2nd', date: new Date }]\n      , meta: { date: date }\n    };\n\n    BlogPostB.create(doc, function (err, created) {\n      assert.ifError(err);\n\n      var id = created.id;\n      BlogPostB.findById(id, {title: 0, 'meta.date': 0, owners: 0, 'comments.user': 0}, function (err, found) {\n        db.close();\n        assert.ifError(err);\n        assert.equal(found._id.toString(), created._id);\n        assert.strictEqual(undefined, found.title);\n        assert.strictEqual('kandinsky', found.def);\n        assert.strictEqual('me', found.author);\n        assert.strictEqual(true, Array.isArray(found.numbers));\n        assert.equal(undefined, found.meta.date);\n        assert.equal(found.numbers.length, 0);\n        assert.equal(undefined, found.owners);\n        assert.strictEqual(true, Array.isArray(found.comments));\n        assert.equal(found.comments.length, 2);\n        found.comments.forEach(function (comment) {\n          assert.equal(undefined, comment.user);\n        })\n        done();\n      });\n    });\n  });\n\n  it('excluded fields should be undefined and defaults applied to other fields', function(done){\n    var db = start()\n      , BlogPostB = db.model(modelName, collection)\n      , id = new DocumentObjectId\n      , date = new Date\n\n    BlogPostB.collection.insert({ _id: id, title: 'hahaha1', meta: { date: date }}, function (err) {\n      assert.ifError(err);\n\n      BlogPostB.findById(id, {title: 0}, function (err, found) {\n        db.close();\n        assert.ifError(err);\n        assert.equal(found._id.toString(), id);\n        assert.strictEqual(undefined, found.title);\n        assert.strictEqual('kandinsky', found.def);\n        assert.strictEqual(undefined, found.author);\n        assert.strictEqual(true, Array.isArray(found.comments));\n        assert.equal(date.toString(), found.meta.date.toString());\n        assert.equal(found.comments.length, 0);\n        done();\n      });\n    });\n  });\n\n  it('where subset of fields excludes _id', function(done){\n    var db = start()\n      , BlogPostB = db.model(modelName, collection);\n    BlogPostB.create({title: 'subset 1'}, function (err, created) {\n      assert.ifError(err);\n      BlogPostB.findOne({title: 'subset 1'}, {title: 1, _id: 0}, function (err, found) {\n        db.close();\n        assert.ifError(err);\n        assert.strictEqual(undefined, found._id);\n        assert.equal(found.title,'subset 1');\n        done();\n      });\n    });\n  })\n\n  it('works with subset of fields, excluding _id', function(done){\n    var db = start()\n      , BlogPostB = db.model(modelName, collection);\n    BlogPostB.create({title: 'subset 1', author: 'me'}, function (err, created) {\n      assert.ifError(err);\n      BlogPostB.find({title: 'subset 1'}, {title: 1, _id: 0}, function (err, found) {\n        db.close();\n        assert.ifError(err);\n        assert.strictEqual(undefined, found[0]._id);\n        assert.equal(found[0].title,'subset 1');\n        assert.strictEqual(undefined, found[0].def);\n        assert.strictEqual(undefined, found[0].author);\n        assert.strictEqual(false, Array.isArray(found[0].comments));\n        done();\n      });\n    });\n  })\n\n  it('works with subset of fields excluding emebedded doc _id (gh-541)', function(done){ \n    var db = start()\n      , BlogPostB = db.model(modelName, collection);\n\n    BlogPostB.create({title: 'LOTR', comments: [{ title: ':)' }]}, function (err, created) {\n      assert.ifError(err);\n      BlogPostB.find({_id: created}, { _id: 0, 'comments._id': 0 }, function (err, found) {\n        db.close();\n        assert.ifError(err);\n        assert.strictEqual(undefined, found[0]._id);\n        assert.equal(found[0].title,'LOTR');\n        assert.strictEqual('kandinsky', found[0].def);\n        assert.strictEqual(undefined, found[0].author);\n        assert.strictEqual(true, Array.isArray(found[0].comments));\n        assert.equal(found[0].comments.length,1);\n        assert.equal(found[0].comments[0].title, ':)');\n        assert.strictEqual(undefined, found[0].comments[0]._id);\n        // gh-590\n        assert.strictEqual(null, found[0].comments[0].id);\n        done();\n      });\n    });\n  })\n\n  it('included fields should have defaults applied when no value exists in db (gh-870)', function(done){\n    var db = start()\n      , BlogPostB = db.model(modelName, collection)\n      , id = new DocumentObjectId\n\n    BlogPostB.collection.insert(\n        { _id: id, title: 'issue 870'}, { safe: true }, function (err) {\n      assert.ifError(err);\n\n      BlogPostB.findById(id, 'def comments', function (err, found) {\n        db.close();\n        assert.ifError(err);\n        assert.ok(found);\n        assert.equal(found._id.toString(), id);\n        assert.strictEqual(undefined, found.title);\n        assert.strictEqual('kandinsky', found.def);\n        assert.strictEqual(undefined, found.author);\n        assert.strictEqual(true, Array.isArray(found.comments));\n        assert.equal(0, found.comments.length);\n        done();\n      });\n    });\n  });\n\n  it('including subdoc field excludes other subdoc fields (gh-1027)', function(done){\n    var db = start()\n      , BlogPostB = db.model(modelName, collection)\n\n    BlogPostB.create({ comments: [{title: 'a'}, {title:'b'}] }, function (err, doc) {\n      assert.ifError(err);\n\n      BlogPostB.findById(doc._id).select('_id comments.title').exec(function (err, found) {\n        db.close();\n        assert.ifError(err);\n        assert.ok(found);\n        assert.equal(found._id.toString(), doc._id.toString());\n        assert.strictEqual(undefined, found.title);\n        assert.strictEqual(true, Array.isArray(found.comments));\n        found.comments.forEach(function (comment) {\n          assert.equal(undefined, comment.body);\n          assert.equal(undefined, comment.comments);\n          assert.equal(undefined, comment._id);\n          assert.ok(!!comment.title);\n        });\n        done();\n      });\n    });\n  });\n\n  it('excluding nested subdoc fields (gh-1027)', function(done){\n    var db = start()\n      , BlogPostB = db.model(modelName, collection)\n\n    BlogPostB.create({ title: 'top', comments: [{title: 'a',body:'body'}, {title:'b', body:'body',comments: [{title:'c'}]}] }, function (err, doc) {\n      assert.ifError(err);\n\n      BlogPostB.findById(doc._id).select('-_id -comments.title -comments.comments.comments -numbers').exec(function (err, found) {\n        db.close();\n        assert.ifError(err);\n        assert.ok(found);\n        assert.equal(undefined, found._id);\n        assert.strictEqual('top', found.title);\n        assert.equal(undefined, found.numbers);\n        assert.strictEqual(true, Array.isArray(found.comments));\n        found.comments.forEach(function (comment) {\n          assert.equal(undefined, comment.title);\n          assert.equal('body', comment.body);\n          assert.strictEqual(true, Array.isArray(comment.comments));\n          assert.ok(comment._id);\n          comment.comments.forEach(function (comment) {\n            assert.equal('c', comment.title);\n            assert.equal(undefined, comment.body);\n            assert.equal(undefined, comment.comments);\n            assert.ok(comment._id);\n          });\n        });\n        done();\n      });\n    });\n  });\n\n  it('casts elemMatch args (gh-1091)', function(done){\n    // mongodb 2.2 support\n    var db = start()\n\n    var postSchema = new Schema({\n       ids: [{type: Schema.ObjectId}]\n    });\n\n    var B = db.model('gh-1091', postSchema);\n    var _id1 = new mongoose.Types.ObjectId;\n    var _id2 = new mongoose.Types.ObjectId;\n\n    //mongoose.set('debug', true);\n    B.create({ ids: [_id1, _id2] }, function (err, doc) {\n      assert.ifError(err);\n\n      B\n      .findById(doc._id)\n      .select({ ids: { $elemMatch: { $in: [_id2.toString()] }}})\n      .exec(function (err, found) {\n        assert.ifError(err);\n        assert.ok(found);\n        assert.equal(found.id, doc.id);\n        assert.equal(1, found.ids.length);\n        assert.equal(_id2.toString(), found.ids[0].toString());\n\n        B\n        .find({ _id: doc._id })\n        .select({ ids: { $elemMatch: { $in: [_id2.toString()] }}})\n        .exec(function (err, found) {\n          assert.ifError(err);\n          assert.ok(found.length);\n          found = found[0];\n          assert.equal(found.id, doc.id);\n          assert.equal(1, found.ids.length);\n          assert.equal(_id2.toString(), found.ids[0].toString());\n          done();\n        })\n      })\n    })\n  })\n\n  it('selecting an array of docs applies defaults properly (gh-1108)', function(done){\n    var db = start()\n      , M = db.model(modelName, collection)\n\n    var m = new M({ title: '1108', comments: [{body:'yay'}] });\n    m.comments[0].comments = undefined;\n    m.save(function (err, doc) {\n      assert.ifError(err);\n      M.findById(doc._id).select('comments').exec(function (err, found) {\n        db.close();\n        assert.ifError(err);\n        assert.ok(Array.isArray(found.comments));\n        assert.equal(1, found.comments.length);\n        assert.ok(Array.isArray(found.comments[0].comments));\n        done();\n      })\n    });\n  })\n})\n"]],"start1":0,"start2":0,"length1":0,"length2":10506}]],"length":10506}
