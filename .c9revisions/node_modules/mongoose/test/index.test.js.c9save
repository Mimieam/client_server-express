{"ts":1352708389716,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nvar url = require('url')\n  , start = require('./common')\n  , assert = require('assert')\n  , mongoose = start.mongoose\n  , Mongoose = mongoose.Mongoose\n  , Schema = mongoose.Schema\n  , random = require('../lib/utils').random\n  , collection = 'blogposts_' + random();\n\ndescribe('mongoose module:', function(){\n  describe('default connection works', function(){\n    it('without options', function(done){\n      var goose = new Mongoose;\n      var db = goose.connection\n        , uri = 'mongodb://localhost/mongoose_test'\n\n      goose.connect(process.env.MONGOOSE_TEST_URI || uri);\n\n      db.on('open', function(){\n        db.close(function () {\n          done();\n        });\n      });\n    })\n\n    it('with options', function(done){\n      var goose = new Mongoose;\n      var db = goose.connection\n        , uri = 'mongodb://localhost/mongoose_test'\n\n      goose.connect(process.env.MONGOOSE_TEST_URI || uri, {db:{safe:false}});\n\n      db.on('open', function(){\n        db.close(function () {\n          done();\n        });\n      });\n    })\n  });\n\n  it('{g,s}etting options', function(){\n    var mongoose = new Mongoose();\n\n    mongoose.set('a', 'b');\n    mongoose.set('long option', 'c');\n\n    assert.equal('b', mongoose.get('a'));\n    assert.equal('b', mongoose.set('a'));\n    assert.equal('c', mongoose.get('long option'));\n  });\n\n  it('declaring global plugins', function(){\n    var mong = new Mongoose()\n      , schema = new Schema()\n      , called = 0;\n\n    mong.plugin(function (s) {\n      assert.equal(s, schema);\n      called++;\n    });\n\n    schema.plugin(function (s) {\n      assert.equal(s, schema);\n      called++;\n    });\n\n    mong.model('GlobalPlugins', schema);\n\n    assert.equal(2, called);\n  })\n\n  describe('disconnection of all connections', function(){\n    describe('no callback', function(){\n      it('works', function (done) {\n        var mong = new Mongoose()\n          , uri = 'mongodb://localhost/mongoose_test'\n          , connections = 0\n          , disconnections = 0\n          , pending = 4;\n\n        mong.connect(process.env.MONGOOSE_TEST_URI || uri);\n        var db = mong.connection;\n\n        function cb () {\n          if (--pending) return;\n          assert.equal(2, connections);\n          assert.equal(2, disconnections);\n          done();\n        }\n\n        db.on('open', function(){\n          connections++;\n          cb();\n        });\n\n        db.on('close', function () {\n          disconnections++;\n          cb();\n        });\n\n        var db2 = mong.createConnection(process.env.MONGOOSE_TEST_URI || uri);\n\n        db2.on('open', function () {\n          connections++;\n          cb();\n        });\n\n        db2.on('close', function () {\n          disconnections++;\n          cb();\n        });\n\n        mong.disconnect();\n      });\n\n      it('properly handles errors', function(){\n        var mong = new Mongoose()\n          , uri = 'mongodb://localhost/mongoose_test'\n\n        mong.connect(process.env.MONGOOSE_TEST_URI || uri);\n        var db = mong.connection;\n\n        // forced failure\n        db.close = function (cb) {\n          cb(new Error('bam'));\n        };\n\n        var failure = {};\n        try {\n          mong.disconnect();\n        } catch (err) {\n          failure = err;\n        }\n        assert.equal('bam', failure.message);\n      })\n    });\n\n    it('with callback', function(done){\n      var mong = new Mongoose()\n        , uri = 'mongodb://localhost/mongoose_test'\n\n      mong.connect(process.env.MONGOOSE_TEST_URI || uri);\n\n      mong.connection.on('open', function () {\n        mong.disconnect(function () {\n          done();\n        });\n      });\n    });\n  });\n\n  describe('model()', function(){\n    it('accessing a model that hasn\\'t been defined', function(){\n      var mong = new Mongoose()\n        , thrown = false;\n\n      try {\n        mong.model('Test');\n      } catch (e) {\n        assert.ok(/hasn't been registered/.test(e.message));\n        thrown = true;\n      }\n\n      assert.equal(true, thrown);\n    });\n    it('returns the model at creation', function(){\n      var Named = mongoose.model('Named', new Schema({ name: String }));\n      var n1 = new Named();\n      assert.equal(n1.name, null);\n      var n2 = new Named({ name: 'Peter Bjorn' });\n      assert.equal(n2.name, 'Peter Bjorn');\n\n      var schema = new Schema({ number: Number });\n      var Numbered = mongoose.model('Numbered', schema, collection);\n      var n3 = new Numbered({ number: 1234 });\n      assert.equal(1234, n3.number.valueOf());\n    });\n  });\n\n  it('connecting with a signature of host, database, function', function(done){\n    var mong = new Mongoose()\n      , uri = process.env.MONGOOSE_TEST_URI || 'mongodb://localhost/mongoose_test';\n\n    uri = url.parse(uri);\n\n    mong.connect(uri.hostname, uri.pathname.substr(1), function (err) {\n      assert.ifError(err);\n      mong.connection.close();\n      done();\n    });\n  });\n\n  describe('connecting with a signature of uri, options, function', function(){\n    it('with single mongod', function(done){\n      var mong = new Mongoose()\n        , uri = process.env.MONGOOSE_TEST_URI || 'mongodb://localhost/mongoose_test';\n\n      mong.connect(uri, { db: { safe: false }}, function (err) {\n        assert.ifError(err);\n        mong.connection.close();\n        done();\n      });\n    })\n\n    it('with replset', function(done){\n      var mong = new Mongoose()\n        , uri = process.env.MONGOOSE_SET_TEST_URI\n\n      if (!uri) return done();\n\n      mong.connect(uri, { db: { safe: false }}, function (err) {\n        assert.ifError(err);\n        mong.connection.close();\n        done();\n      });\n    })\n  });\n\n  it('goose.connect() to a replica set', function(done){\n    var uri = process.env.MONGOOSE_SET_TEST_URI;\n\n    if (!uri) {\n      console.log('\\033[31m', '\\n', 'You\\'re not testing replica sets!'\n                , '\\n', 'Please set the MONGOOSE_SET_TEST_URI env variable.', '\\n'\n                , 'e.g: `mongodb://localhost:27017/db,mongodb://localhostâ€¦`', '\\n'\n                , '\\033[39m');\n      return done();\n    }\n\n    var mong = new Mongoose()\n\n    mong.connect(uri, function (err) {\n      assert.ifError(err);\n\n      mong.model('Test', new mongoose.Schema({\n          test: String\n      }));\n\n      var Test = mong.model('Test')\n        , test = new Test();\n\n      test.test = 'aa';\n      test.save(function (err) {\n        assert.ifError(err);\n\n        Test.findById(test._id, function (err, doc) {\n          assert.ifError(err);\n          assert.equal('aa', doc.test);\n          mong.connection.close();\n          complete();\n        });\n      });\n    });\n\n    mong.connection.on('fullsetup', complete);\n\n    var pending = 2;\n    function complete () {\n      if (--pending) return;\n      done();\n    }\n  });\n\n  it('goose.createConnection() to a replica set', function(done){\n    var uri = process.env.MONGOOSE_SET_TEST_URI;\n\n    if (!uri) return done();\n\n    var mong = new Mongoose();\n\n    var conn = mong.createConnection(uri, function (err) {\n      assert.ifError(err);\n\n      mong.model('ReplSetTwo', new mongoose.Schema({\n          test: String\n      }));\n\n      var Test = conn.model('ReplSetTwo')\n        , test = new Test();\n\n      test.test = 'aa';\n      test.save(function (err) {\n        assert.ifError(err);\n\n        Test.findById(test._id, function (err, doc) {\n          assert.ifError(err);\n          assert.equal('aa', doc.test);\n          conn.close();\n          complete();\n        });\n      });\n    });\n\n    conn.on('fullsetup', complete);\n\n    var pending = 2;\n    function complete () {\n      if (--pending) return;\n      done();\n    }\n  });\n\n  it('public exports', function(){\n    assert.equal('string', typeof mongoose.version);\n    assert.equal('function', typeof mongoose.Collection);\n    assert.equal('function', typeof mongoose.Connection);\n    assert.equal('function', typeof mongoose.Schema);\n    assert.equal('function', typeof mongoose.SchemaType);\n    assert.equal('function', typeof mongoose.Query);\n    assert.equal('function', typeof mongoose.Promise);\n    assert.equal('function', typeof mongoose.Model);\n    assert.equal('function', typeof mongoose.Document);\n  })\n\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":8109}]],"length":8109}
