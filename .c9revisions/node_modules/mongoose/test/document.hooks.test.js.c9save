{"ts":1352898730429,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/**\n * Module dependencies.\n */\n\nvar start = require('./common')\n  , mongoose = start.mongoose\n  , assert = require('assert')\n  , Schema = mongoose.Schema\n  , ObjectId = Schema.ObjectId\n  , Document = require('../lib/document')\n  , DocumentObjectId = mongoose.Types.ObjectId;\n\n/**\n * Test Document constructor.\n */\n\nfunction TestDocument () {\n  Document.apply(this, arguments);\n};\n\n/**\n * Inherits from Document.\n */\n\nTestDocument.prototype.__proto__ = Document.prototype;\n\n/**\n * Set a dummy schema to simulate compilation.\n */\n\nvar em = new Schema({ title: String, body: String });\nem.virtual('works').get(function () {\n  return 'em virtual works'\n});\nvar schema = new Schema({\n    test    : String\n  , oids    : [ObjectId]\n  , numbers : [Number]\n  , nested  : {\n        age   : Number\n      , cool  : ObjectId\n      , deep  : { x: String }\n      , path  : String\n      , setr  : String\n    }\n  , nested2 : {\n        nested: String\n      , yup   : {\n            nested  : Boolean\n          , yup     : String\n          , age     : Number\n        }\n    }\n  , em: [em]\n});\nTestDocument.prototype._setSchema(schema);\n\nschema.virtual('nested.agePlus2').get(function (v) {\n  return this.nested.age + 2;\n});\nschema.virtual('nested.setAge').set(function (v) {\n  this.nested.age = v;\n});\nschema.path('nested.path').get(function (v) {\n  return this.nested.age + (v ? v : '');\n});\nschema.path('nested.setr').set(function (v) {\n  return v + ' setter';\n});\n\n/**\n * Method subject to hooks. Simply fires the callback once the hooks are\n * executed.\n */\n\nTestDocument.prototype.hooksTest = function(fn){\n  fn(null, arguments);\n};\n\ndescribe('document: hooks:', function () {\n  it('step order', function(done){\n    var doc = new TestDocument()\n      , steps = 0\n      , awaiting = 0\n      , called = false;\n\n    // serial\n    doc.pre('hooksTest', function(next){\n      steps++;\n      setTimeout(function(){\n        // make sure next step hasn't executed yet\n        assert.equal(1, steps);\n        next();\n      }, 50);\n    });\n\n    doc.pre('hooksTest', function(next){\n      steps++;\n      next();\n    });\n\n    // parallel\n    doc.pre('hooksTest', true, function(next, done){\n      steps++;\n      assert.equal(3, steps);\n      setTimeout(function(){\n        assert.equal(4, steps);\n      }, 10);\n      setTimeout(function(){\n        steps++;\n        done();\n      }, 110);\n      next();\n    });\n\n    doc.pre('hooksTest', true, function(next, done){\n      steps++;\n      setTimeout(function(){\n        assert.equal(4, steps);\n      }, 10);\n      setTimeout(function(){\n        steps++;\n        done();\n      }, 110);\n      next();\n    });\n\n    doc.hooksTest(function(err){\n      assert.ifError(err);\n      assert.equal(6, steps);\n      done();\n    });\n\n  });\n\n  it('calling next twice does not break', function(done){\n    var doc = new TestDocument()\n      , steps = 0\n      , called = false;\n\n    doc.pre('hooksTest', function(next){\n      steps++;\n      next();\n      next();\n    });\n\n    doc.pre('hooksTest', function(next){\n      steps++;\n      next();\n    });\n\n    doc.hooksTest(function(err){\n      assert.ifError(err);\n      assert.equal(2, steps);\n      done();\n    });\n  });\n\n  it('calling done twice does not break', function(done){\n    var doc = new TestDocument()\n      , steps = 0\n\n    doc.pre('hooksTest', true, function(next, done){\n      steps++;\n      next();\n      done();\n      done();\n    });\n\n    doc.pre('hooksTest', true, function(next, done){\n      steps++;\n      next();\n      done();\n      done();\n    });\n\n    doc.hooksTest(function(err){\n      assert.ifError(err);\n      assert.equal(2, steps);\n      done();\n    });\n  });\n\n  it('errors from a serial hook', function(done){\n    var doc = new TestDocument()\n      , steps = 0\n      , called = false;\n\n    doc.pre('hooksTest', function(next){\n      steps++;\n      next();\n    });\n\n    doc.pre('hooksTest', function(next){\n      steps++;\n      next(new Error);\n    });\n\n    doc.pre('hooksTest', function(next){\n      steps++;\n    });\n\n    doc.hooksTest(function(err){\n      assert.ok(err instanceof Error);\n      assert.equal(2, steps);\n      done();\n    });\n  });\n\n  it('errors from last serial hook', function(done){\n    var doc = new TestDocument()\n      , called = false;\n\n    doc.pre('hooksTest', function(next){\n      next(new Error);\n    });\n\n    doc.hooksTest(function(err){\n      assert.ok(err instanceof Error);\n      done();\n    });\n  });\n\n  it('mutating incoming args via middleware', function(){\n    var doc = new TestDocument();\n\n    doc.pre('set', function(next, path, val){\n      next(path, 'altered-' + val);\n    });\n\n    doc.set('test', 'me');\n    assert.equal('altered-me', doc.test);\n  });\n\n  it('test hooks system errors from a parallel hook', function(done){\n    var doc = new TestDocument()\n      , steps = 0\n      , called = false;\n\n    doc.pre('hooksTest', true, function(next, done){\n      steps++;\n      next();\n      done();\n    });\n\n    doc.pre('hooksTest', true, function(next, done){\n      steps++;\n      next();\n      done();\n    });\n\n    doc.pre('hooksTest', true, function(next, done){\n      steps++;\n      next();\n      done(new Error);\n    });\n\n    doc.hooksTest(function(err){\n      assert.ok(err instanceof Error);\n      assert.equal(3, steps);\n      done();\n    });\n  });\n\n  it('passing two arguments to a method subject to hooks and return value', function(done){\n    var doc = new TestDocument()\n      , called = false;\n\n    doc.pre('hooksTest', function (next) {\n      next();\n    });\n\n    doc.hooksTest(function (err, args) {\n      assert.equal(2, args.length);\n      assert.equal(args[1], 'test');\n      done();\n    }, 'test')\n  });\n\n  it('hooking set works with document arrays (gh-746)', function(done){\n    var db = start();\n\n    var child = new Schema({ text: String });\n\n    child.pre('set', function (next, path, value, type) {\n      next(path, value, type);\n    });\n\n    var schema = new Schema({\n        name: String\n      , e: [child]\n    });\n\n    var S = db.model('docArrayWithHookedSet', schema);\n\n    var s = new S({ name: \"test\" });\n    s.e = [{ text: 'hi' }];\n    s.save(function (err) {\n      assert.ifError(err);\n\n      S.findById(s.id, function (err ,s) {\n        assert.ifError(err);\n\n        s.e = [{ text: 'bye' }];\n        s.save(function (err) {\n          assert.ifError(err);\n\n          S.findById(s.id, function (err, s) {\n            db.close();\n            assert.ifError(err);\n            assert.equal('bye', s.e[0].text);\n            done();\n          })\n        })\n      })\n    });\n  });\n\n  it('pre save hooks on sub-docs should not exec after validation errors', function(done){\n    var db = start();\n    var presave = false;\n\n    var child = new Schema({ text: { type: String, required: true }});\n\n    child.pre('save', function (next) {\n      presave = true;\n      next();\n    });\n\n    var schema = new Schema({\n        name: String\n      , e: [child]\n    });\n\n    var S = db.model('docArrayWithHookedSave', schema);\n    var s = new S({ name: 'hi', e: [{}] });\n    s.save(function (err) {\n      assert.ok(err);\n      assert.ok(err.errors['e.0.text']);\n      assert.equal(false, presave);\n      done();\n    });\n  })\n\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":7158}]],"length":7158}
