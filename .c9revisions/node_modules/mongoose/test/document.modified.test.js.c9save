{"ts":1352898775577,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/**\n * Test dependencies.\n */\n\nvar start = require('./common')\n  , assert = require('assert')\n  , mongoose = start.mongoose\n  , random = require('../lib/utils').random\n  , Query = require('../lib/query')\n  , Schema = mongoose.Schema\n  , SchemaType = mongoose.SchemaType\n  , CastError = SchemaType.CastError\n  , ValidatorError = SchemaType.ValidatorError\n  , ValidationError = mongoose.Document.ValidationError\n  , ObjectId = Schema.ObjectId\n  , DocumentObjectId = mongoose.Types.ObjectId\n  , DocumentArray = mongoose.Types.DocumentArray\n  , EmbeddedDocument = mongoose.Types.Embedded\n  , MongooseArray = mongoose.Types.Array\n  , MongooseError = mongoose.Error;\n\n/**\n * Setup.\n */\n\nvar Comments = new Schema;\n\nComments.add({\n    title     : String\n  , date      : Date\n  , body      : String\n  , comments  : [Comments]\n});\n\nvar BlogPost = new Schema({\n    title     : String\n  , author    : String\n  , slug      : String\n  , date      : Date\n  , meta      : {\n        date      : Date\n      , visitors  : Number\n    }\n  , published : Boolean\n  , mixed     : {}\n  , numbers   : [Number]\n  , owners    : [ObjectId]\n  , comments  : [Comments]\n  , nested    : { array: [Number] }\n});\n\nBlogPost\n.virtual('titleWithAuthor')\n.get(function () {\n  return this.get('title') + ' by ' + this.get('author');\n})\n.set(function (val) {\n  var split = val.split(' by ');\n  this.set('title', split[0]);\n  this.set('author', split[1]);\n});\n\nBlogPost.method('cool', function(){\n  return this;\n});\n\nBlogPost.static('woot', function(){\n  return this;\n});\n\nvar modelName = 'docuemnt.modified.blogpost'\nmongoose.model(modelName, BlogPost);\n\nvar collection = 'blogposts_' + random();\n\ndescribe('document modified', function(){\n  describe('modified states', function(){\n    it('reset after save', function(done){\n      var db = start()\n        , B = db.model(modelName, collection)\n        , pending = 2;\n\n      var b = new B;\n\n      b.numbers.push(3);\n      b.save(function (err) {\n        assert.strictEqual(null, err);\n        --pending || find();\n      });\n\n      b.numbers.push(3);\n      b.save(function (err) {\n        assert.strictEqual(null, err);\n        --pending || find();\n      });\n\n      function find () {\n        B.findById(b, function (err, b) {\n          db.close();\n          assert.strictEqual(null, err);\n          assert.equal(2, b.numbers.length);\n          done();\n        });\n      }\n    });\n\n    it('of embedded docs reset after save', function(done){\n      var db = start()\n        , BlogPost = db.model(modelName, collection);\n\n      var post = new BlogPost({ title: 'hocus pocus' });\n      post.comments.push({ title: 'Humpty Dumpty', comments: [{title: 'nested'}] });\n      post.save(function(err){\n        db.close();\n        assert.strictEqual(null, err);\n        var mFlag = post.comments[0].isModified('title');\n        assert.equal(false, mFlag);\n        assert.equal(false, post.isModified('title'));\n        done();\n      });\n    })\n  });\n\n  describe('isModified', function(){\n    it('should not throw with no argument', function(){\n      var db = start();\n      var BlogPost = db.model(modelName, collection);\n      var post = new BlogPost;\n      db.close();\n\n      var threw = false;\n      try {\n        post.isModified();\n      } catch (err) {\n        threw = true;\n      }\n\n      assert.equal(false, threw);\n    });\n\n    it('when modifying keys', function(){\n      var db = start()\n        , BlogPost = db.model(modelName, collection);\n\n      db.close();\n      var post = new BlogPost;\n      post.init({\n          title       : 'Test'\n        , slug        : 'test'\n        , date        : new Date\n      });\n\n      assert.equal(false, post.isModified('title'));\n      post.set('title', 'test');\n      assert.equal(true, post.isModified('title'));\n\n      assert.equal(false, post.isModified('date'));\n      post.set('date', new Date(post.date + 10));\n      assert.equal(true, post.isModified('date'));\n\n      assert.equal(false, post.isModified('meta.date'));\n    })\n\n    it('setting a key identically to its current value should not dirty the key', function(){\n      var db = start()\n        , BlogPost = db.model(modelName, collection);\n\n      db.close();\n      var post = new BlogPost;\n      post.init({\n          title       : 'Test'\n        , slug        : 'test'\n        , date        : new Date\n      });\n\n      assert.equal(false, post.isModified('title'));\n      post.set('title', 'Test');\n      assert.equal(false, post.isModified('title'));\n    })\n\n    describe('on DocumentArray', function(){\n      it('work', function () {\n        var db = start()\n          , BlogPost = db.model(modelName, collection);\n\n        db.close();\n        var post = new BlogPost()\n        post.init({\n            title       : 'Test'\n          , slug        : 'test'\n          , comments    : [ { title: 'Test', date: new Date, body: 'Test' } ]\n        });\n\n        assert.equal(false, post.isModified('comments.0.title'));\n        post.get('comments')[0].set('title', 'Woot');\n        assert.equal(true, post.isModified('comments'));\n        assert.equal(false, post.isDirectModified('comments'));\n        assert.equal(true, post.isModified('comments.0.title'));\n        assert.equal(true, post.isDirectModified('comments.0.title'));\n\n        db.close();\n      })\n      it('with accessors', function(){\n        var db = start()\n          , BlogPost = db.model(modelName, collection);\n\n        var post = new BlogPost()\n        post.init({\n            title       : 'Test'\n          , slug        : 'test'\n          , comments    : [ { title: 'Test', date: new Date, body: 'Test' } ]\n        });\n\n        assert.equal(false, post.isModified('comments.0.body'));\n        post.get('comments')[0].body = 'Woot';\n        assert.equal(true, post.isModified('comments'));\n        assert.equal(false, post.isDirectModified('comments'));\n        assert.equal(true, post.isModified('comments.0.body'));\n        assert.equal(true, post.isDirectModified('comments.0.body'));\n\n        db.close();\n      })\n    })\n\n    describe('on MongooseArray', function(){\n      it('atomic methods', function(){\n        // COMPLETEME\n        var db = start()\n          , BlogPost = db.model(modelName, collection);\n\n        db.close();\n        var post = new BlogPost()\n        assert.equal(false, post.isModified('owners'));\n        post.get('owners').push(new DocumentObjectId);\n        assert.equal(true, post.isModified('owners'));\n      });\n      it('native methods', function(){\n        // COMPLETEME\n        var db = start()\n          , BlogPost = db.model(modelName, collection);\n\n        db.close();\n        var post = new BlogPost;\n        assert.equal(false, post.isModified('owners'));\n      });\n    });\n\n    it('on entire document', function(done){\n      var db = start()\n        , BlogPost = db.model(modelName, collection)\n\n      var doc = {\n          title       : 'Test'\n        , slug        : 'test'\n        , date        : new Date\n        , meta        : {\n              date      : new Date\n            , visitors  : 5\n          }\n        , published   : true\n        , mixed       : { x: [ { y: [1,'yes', 2] } ] }\n        , numbers     : []\n        , owners      : [new DocumentObjectId, new DocumentObjectId]\n        , comments    : [\n            { title: 'Test', date: new Date, body: 'Test' }\n          , { title: 'Super', date: new Date, body: 'Cool' }\n          ]\n      };\n\n      BlogPost.create(doc, function (err, post) {\n        assert.ifError(err);\n        BlogPost.findById(post.id, function (err, postRead) {\n          db.close();\n          assert.ifError(err);\n          //set the same data again back to the document.\n          //expected result, nothing should be set to modified\n          assert.equal(false, postRead.isModified('comments'));\n          assert.equal(false, postRead.isNew);\n          postRead.set(postRead.toObject());\n\n          assert.equal(false, postRead.isModified('title'));\n          assert.equal(false, postRead.isModified('slug'));\n          assert.equal(false, postRead.isModified('date'));\n          assert.equal(false, postRead.isModified('meta.date'));\n          assert.equal(false, postRead.isModified('meta.visitors'));\n          assert.equal(false, postRead.isModified('published'));\n          assert.equal(false, postRead.isModified('mixed'));\n          assert.equal(false, postRead.isModified('numbers'));\n          assert.equal(false, postRead.isModified('owners'));\n          assert.equal(false, postRead.isModified('comments'));\n          var arr = postRead.comments.slice();\n          arr[2] = postRead.comments.create({ title: 'index' });\n          postRead.comments = arr;\n          assert.equal(true, postRead.isModified('comments'));\n          done();\n        });\n      });\n    })\n  });\n})\n"]],"start1":0,"start2":0,"length1":0,"length2":8749}]],"length":8749}
