{"ts":1352708311915,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/**\n * Module dependencies.\n */\n\nvar start = require('./common')\n  , assert = require('assert')\n  , mongoose = start.mongoose\n  , Schema = mongoose.Schema\n\n/**\n * Test.\n */\n\ndescribe('connections:', function(){\n  it('should allow closing a closed connection', function(done){\n    var db = mongoose.createConnection()\n      , called = false;\n\n    assert.equal(0, db.readyState);\n    db.close(done);\n  })\n\n  it('should accept valid arguments', function(){\n    var db = mongoose.createConnection('mongodb://localhost/fake');\n    db.on('error', function(err){});\n    assert.equal('object', typeof db.options);\n    assert.equal('object', typeof db.options.server);\n    assert.equal(true, db.options.server.auto_reconnect);\n    assert.equal('object', typeof db.options.db);\n    assert.equal(false, db.options.db.forceServerObjectId);\n    assert.equal(undefined, db.pass);\n    assert.equal(undefined, db.user);\n    assert.equal('fake', db.name);\n    assert.equal('localhost', db.host);\n    assert.equal(27017, db.port);\n    db.close();\n\n    db = mongoose.createConnection('mongodb://localhost:27000/fake');\n    db.on('error', function(err){});\n    assert.equal('object', typeof db.options);\n    assert.equal('object', typeof db.options.server);\n    assert.equal(true, db.options.server.auto_reconnect);\n    assert.equal('object', typeof db.options.db);\n    assert.equal(27000, db.port);\n    db.close();\n\n    db = mongoose.createConnection('mongodb://aaron:psw@localhost:27000/fake');\n    db.on('error', function(err){});\n    assert.equal('object', typeof db.options);\n    assert.equal('object', typeof db.options.server);\n    assert.equal(true, db.options.server.auto_reconnect);\n    assert.equal('object', typeof db.options.db);\n    assert.equal(false, db.options.db.forceServerObjectId);\n    assert.equal('psw', db.pass);\n    assert.equal('aaron', db.user);\n    assert.equal('fake', db.name);\n    assert.equal('localhost', db.host);\n    assert.equal(27000, db.port);\n    db.close();\n\n    db = mongoose.createConnection('mongodb://aaron:psw@localhost:27000/fake', { db: { forceServerObjectId: true }});\n    db.on('error', function(err){});\n    assert.equal('object', typeof db.options);\n    assert.equal('object', typeof db.options.server);\n    assert.equal(true, db.options.server.auto_reconnect);\n    assert.equal('object', typeof db.options.db);\n    assert.equal(false, db.options.db.forceServerObjectId);\n    db.close();\n\n    db = mongoose.createConnection('mongodb://aaron:psw@localhost:27000/fake', { server: { auto_reconnect: false }});\n    db.on('error', function(err){});\n    assert.equal('object', typeof db.options);\n    assert.equal('object', typeof db.options.server);\n    assert.equal(false, db.options.server.auto_reconnect);\n    assert.equal('object', typeof db.options.db);\n    assert.equal(false, db.options.db.forceServerObjectId);\n    db.close();\n\n    db = mongoose.createConnection('127.0.0.1', 'faker', 28000, { server: { auto_reconnect: true }});\n    db.on('error', function(err){});\n    assert.equal('object', typeof db.options);\n    assert.equal('object', typeof db.options.server);\n    assert.equal(true, db.options.server.auto_reconnect);\n    assert.equal('object', typeof db.options.db);\n    assert.equal(false, db.options.db.forceServerObjectId);\n    assert.equal('faker', db.name);\n    assert.equal('127.0.0.1', db.host);\n    assert.equal(28000, db.port);\n    db.close();\n\n    db = mongoose.createConnection('127.0.0.1', 'faker', 28001);\n    db.on('error', function(err){});\n    assert.equal('object', typeof db.options);\n    assert.equal('object', typeof db.options.server);\n    assert.equal(true, db.options.server.auto_reconnect);\n    assert.equal('object', typeof db.options.db);\n    assert.equal(false, db.options.db.forceServerObjectId);\n    assert.equal('faker', db.name);\n    assert.equal('127.0.0.1', db.host);\n    assert.equal(28001, db.port);\n    db.close();\n\n    db = mongoose.createConnection('127.0.0.1', 'faker', { blah: 1 });\n    db.on('error', function(err){});\n    assert.equal('object', typeof db.options);\n    assert.equal('object', typeof db.options.server);\n    assert.equal(true, db.options.server.auto_reconnect);\n    assert.equal('object', typeof db.options.db);\n    assert.equal(false, db.options.db.forceServerObjectId);\n    assert.equal('faker', db.name);\n    assert.equal('127.0.0.1', db.host);\n    assert.equal(27017, db.port);\n    assert.equal(1, db.options.blah);\n    db.close();\n\n    db = mongoose.createConnection('127.0.0.1', 'faker');\n    db.on('error', function(err){});\n    assert.equal('object', typeof db.options);\n    assert.equal('object', typeof db.options.server);\n    assert.equal(true, db.options.server.auto_reconnect);\n    assert.equal('object', typeof db.options.db);\n    assert.equal(false, db.options.db.forceServerObjectId);\n    assert.equal('faker', db.name);\n    assert.equal('127.0.0.1', db.host);\n    assert.equal(27017, db.port);\n    db.close();\n\n    // Test connecting using user/pass in hostname\n    db = mongoose.createConnection('aaron:psw@localhost', 'fake', 27000);\n    db.on('error', function(err){});\n    assert.equal('object', typeof db.options);\n    assert.equal('object', typeof db.options.server);\n    assert.equal(true, db.options.server.auto_reconnect);\n    assert.equal('object', typeof db.options.db);\n    assert.equal(false, db.options.db.forceServerObjectId);\n    assert.equal('fake', db.name);\n    assert.equal('localhost', db.host);\n    assert.equal(27000, db.port);\n    assert.equal('psw', db.pass);\n    assert.equal('aaron', db.user);\n    db.close();\n\n    // Test connecting using user/pass options\n    db = mongoose.createConnection('localhost', 'fake', 27000, {user: 'aaron', pass: 'psw'});\n    db.on('error', function(err){});\n    assert.equal('object', typeof db.options);\n    assert.equal('object', typeof db.options.server);\n    assert.equal(true, db.options.server.auto_reconnect);\n    assert.equal('object', typeof db.options.db);\n    assert.equal(false, db.options.db.forceServerObjectId);\n    assert.equal('fake', db.name);\n    assert.equal('localhost', db.host);\n    assert.equal(27000, db.port);\n    assert.equal('psw', db.pass);\n    assert.equal('aaron', db.user);\n    db.close();\n\n    // Test connecting using only user option - which shouldn't work\n    db = mongoose.createConnection('localhost', 'fake', 27000, {user: 'no_pass'});\n    db.on('error', function(err){});\n    assert.equal('object', typeof db.options);\n    assert.equal('object', typeof db.options.server);\n    assert.equal(true, db.options.server.auto_reconnect);\n    assert.equal('object', typeof db.options.db);\n    assert.equal(false, db.options.db.forceServerObjectId);\n    assert.equal('fake', db.name);\n    assert.equal('localhost', db.host);\n    assert.equal(27000, db.port);\n    assert.equal(undefined, db.pass);\n    assert.equal(undefined, db.user);\n    db.close();\n  });\n\n  describe('missing protocols', function(){\n    it('are allowed with replsets', function(){\n      var conn = mongoose.createConnection('localhost:12345,127.0.0.1:14326', function (err) {\n        // force missing db error so we don't actually connect.\n        assert.ok(err);\n      });\n      assert.deepEqual(['localhost', '127.0.0.1'], conn.host);\n      assert.deepEqual([12345, 14326], conn.port);\n    })\n    it('are allowed with single connections', function(){\n      var conn = mongoose.createConnection();\n      conn.doOpen = function(){};\n      conn.open('localhost:12345/woot');\n      assert.deepEqual('localhost', conn.host);\n      assert.deepEqual(12345, conn.port);\n    })\n\n  });\n\n  describe('connect callbacks', function(){\n    it('execute with user:pwd connection strings', function(done){\n      var db = mongoose.createConnection('mongodb://aaron:psw@localhost:27000/fake', { server: { auto_reconnect: true }}, function () {\n        done();\n      });\n      db.on('error', function (err) { assert.ok(err) });\n      assert.equal('object', typeof db.options);\n      assert.equal('object', typeof db.options.server);\n      assert.equal(true, db.options.server.auto_reconnect);\n      assert.equal('object', typeof db.options.db);\n      assert.equal(false, db.options.db.forceServerObjectId);\n      db.close();\n    });\n    it('execute without user:pwd connection strings', function(done){\n      var db = mongoose.createConnection('mongodb://localhost/fake', done);\n      db.on('error', function (err) { assert.ok(err) });\n      assert.equal('object', typeof db.options);\n      assert.equal('object', typeof db.options.server);\n      assert.equal(true, db.options.server.auto_reconnect);\n      assert.equal('object', typeof db.options.db);\n      assert.equal(false, db.options.db.forceServerObjectId);\n      assert.equal(undefined, db.user);\n      assert.equal('fake', db.name);\n      assert.equal('localhost', db.host);\n      assert.equal(27017, db.port);\n      db.close();\n    });\n    it('should return an error if malformed uri passed', function(done){\n      var db = mongoose.createConnection('mongodb:///fake', function (err) {\n        assert.equal('Missing hostname.', err.message);\n        done();\n      });\n      assert.equal('object', typeof db.options);\n      assert.equal('object', typeof db.options.server);\n      assert.equal(true, db.options.server.auto_reconnect);\n      assert.equal('object', typeof db.options.db);\n      assert.equal(false, db.options.db.forceServerObjectId);\n      assert.equal(undefined, db.name);\n      assert.equal(undefined, db.host);\n      assert.equal(undefined, db.port);\n      db.close();\n    })\n    it('should return an error if db was not specified', function(done){\n      var db = mongoose.createConnection('mongodb://localhost', function (err) {\n        assert.equal('Missing database name.', err.message);\n        done();\n      });\n      assert.equal('object', typeof db.options);\n      assert.equal('object', typeof db.options.server);\n      assert.equal(true, db.options.server.auto_reconnect);\n      assert.equal('object', typeof db.options.db);\n      assert.equal(false, db.options.db.forceServerObjectId);\n      assert.equal(undefined, db.name);\n      assert.equal(undefined, db.host);\n      assert.equal(undefined, db.port);\n      db.close();\n    })\n    it('should fire when individual args are passed', function(done){\n      var db = mongoose.createConnection('127.0.0.1', 'faker', 28000, { server: { auto_reconnect: false }},function(){\n        done();\n      });\n      assert.equal('object', typeof db.options);\n      assert.equal('object', typeof db.options.server);\n      assert.equal(false, db.options.server.auto_reconnect);\n      assert.equal('object', typeof db.options.db);\n      assert.equal(false, db.options.db.forceServerObjectId);\n      assert.equal('faker', db.name);\n      assert.equal('127.0.0.1', db.host);\n      assert.equal(28000, db.port);\n      db.close();\n    });\n    it('should fire when no options are passed', function(done){\n      var db = mongoose.createConnection('127.0.0.1', 'faker', 28000, function(){\n        done();\n      });\n      assert.equal('object', typeof db.options);\n      assert.equal('object', typeof db.options.server);\n      assert.equal(true, db.options.server.auto_reconnect);\n      assert.equal('object', typeof db.options.db);\n      assert.equal(false, db.options.db.forceServerObjectId);\n      assert.equal('faker', db.name);\n      assert.equal('127.0.0.1', db.host);\n      assert.equal(28000, db.port);\n      db.close();\n    })\n    it('should fire when default port utilized', function(done){\n      var db = mongoose.createConnection('127.0.0.1', 'faker', done);\n      assert.equal('object', typeof db.options);\n      assert.equal('object', typeof db.options.server);\n      assert.equal(true, db.options.server.auto_reconnect);\n      assert.equal('object', typeof db.options.db);\n      assert.equal(false, db.options.db.forceServerObjectId);\n      assert.equal('faker', db.name);\n      assert.equal('127.0.0.1', db.host);\n      assert.equal(27017, db.port);\n      db.close();\n    })\n  });\n\n  describe('errors', function(){\n    it('should be thrown when there are no listeners', function(done){\n      var old = process._events.uncaughtException;\n\n      // sidestep mochas listener\n      process._events.uncaughtException = function (err) {\n        assert.ok(err);\n        process._events.uncaughtException = old;\n        done()\n      }\n\n      var db= start({ uri: 'mongodb://whatever23939.localhost/noooope', noErrorListener: 1 });\n    })\n\n    it('should occur without hanging when password with special chars is used (gh-460)', function (done) {\n      var db = mongoose.createConnection('mongodb://aaron:psw?@localhost/fake', function (err) {\n        assert.ok(err);\n        db.close();\n        done();\n      });\n    });\n  })\n\n  describe('.model()', function(){\n    it('allows passing a schema', function(){\n      var db = start();\n      var MyModel = db.model('MyModelasdf', new Schema({\n          name: String\n      }));\n      db.close();\n\n      assert.ok(MyModel.schema instanceof Schema);\n      assert.ok(MyModel.prototype.schema instanceof Schema);\n\n      var m = new MyModel({name:'aaron'});\n      assert.equal('aaron', m.name);\n    })\n    it('should properly assign the db', function(){\n      var A = mongoose.model('testing853a', new Schema({x:String}), 'testing853-1');\n      var B = mongoose.model('testing853b', new Schema({x:String}), 'testing853-2');\n      var C = B.model('testing853a');\n      assert.ok(C == A);\n    })\n  })\n\n  it('error event fires with one listener', function(done){\n    var db= start({ uri: 'mongodb://localasdfads/fakeeee', noErrorListener: 1 })\n    db.on('error', function () {\n      // this callback has no params which triggered the bug #759\n      done();\n    });\n  })\n\n  describe('openSet', function(){\n    it('accepts uris, dbname, options', function(done){\n      var m = new mongoose.Mongoose;\n      var uris = process.env.MONGOOSE_SET_TEST_URI;\n      if (!uris) return done();\n\n      m.connection.on('error', done);\n      m.connection.on('open', function () {\n        m.connection.close(done);\n      });\n\n      try {\n        m.connect(uris, 'mongoose_test', { server: { auto_reconnect: true }});\n      } catch (err) {\n        done(err);\n      }\n    })\n  })\n})\n\n"]],"start1":0,"start2":0,"length1":0,"length2":14179}]],"length":14179}
