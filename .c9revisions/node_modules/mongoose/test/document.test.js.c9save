{"ts":1352708407685,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/**\n * Module dependencies.\n */\n\nvar start = require('./common')\n  , mongoose = start.mongoose\n  , assert = require('assert')\n  , random = require('../lib/utils').random\n  , Schema = mongoose.Schema\n  , ObjectId = Schema.ObjectId\n  , Document = require('../lib/document')\n  , DocumentObjectId = mongoose.Types.ObjectId\n  , SchemaType = mongoose.SchemaType\n  , ValidatorError = SchemaType.ValidatorError\n  , ValidationError = mongoose.Document.ValidationError\n  , MongooseError = mongoose.Error;\n\n/**\n * Test Document constructor.\n */\n\nfunction TestDocument () {\n  Document.apply(this, arguments);\n};\n\n/**\n * Inherits from Document.\n */\n\nTestDocument.prototype.__proto__ = Document.prototype;\n\n/**\n * Set a dummy schema to simulate compilation.\n */\n\nvar em = new Schema({ title: String, body: String });\nem.virtual('works').get(function () {\n  return 'em virtual works'\n});\nvar schema = new Schema({\n    test    : String\n  , oids    : [ObjectId]\n  , numbers : [Number]\n  , nested  : {\n        age   : Number\n      , cool  : ObjectId\n      , deep  : { x: String }\n      , path  : String\n      , setr  : String\n    }\n  , nested2 : {\n        nested: String\n      , yup   : {\n            nested  : Boolean\n          , yup     : String\n          , age     : Number\n        }\n    }\n  , em: [em]\n  , date: Date\n});\nTestDocument.prototype._setSchema(schema);\n\nschema.virtual('nested.agePlus2').get(function (v) {\n  return this.nested.age + 2;\n});\nschema.virtual('nested.setAge').set(function (v) {\n  this.nested.age = v;\n});\nschema.path('nested.path').get(function (v) {\n  return (this.nested.age || '') + (v ? v : '');\n});\nschema.path('nested.setr').set(function (v) {\n  return v + ' setter';\n});\n\nvar dateSetterCalled = false;\nschema.path('date').set(function (v) {\n  // should not have been cast to a Date yet\n  assert.equal('string', typeof v);\n  dateSetterCalled = true;\n  return v;\n});\n\n/**\n * Method subject to hooks. Simply fires the callback once the hooks are\n * executed.\n */\n\nTestDocument.prototype.hooksTest = function(fn){\n  fn(null, arguments);\n};\n\n/**\n * Test.\n */\n\ndescribe('document:', function(){\n\n  it('test shortcut getters', function(){\n    var doc = new TestDocument();\n    doc.init({\n        test    : 'test'\n      , oids    : []\n      , nested  : {\n            age   : 5\n          , cool  : DocumentObjectId.fromString('4c6c2d6240ced95d0e00003c')\n          , path  : 'my path'\n        }\n    });\n\n    ////\n    assert.equal('test', doc.test);\n    assert.ok(doc.oids instanceof Array);\n    assert.equal(doc.nested.age, 5);\n    assert.equal(DocumentObjectId.toString(doc.nested.cool), '4c6c2d6240ced95d0e00003c');\n    assert.equal(7, doc.nested.agePlus2);\n    assert.equal('5my path', doc.nested.path);\n    doc.nested.setAge = 10;\n    assert.equal(10, doc.nested.age);\n    doc.nested.setr = 'set it';\n    assert.equal(doc.getValue('nested.setr'), 'set it setter');\n\n    var doc2 = new TestDocument();\n    doc2.init({\n        test    : 'toop'\n      , oids    : []\n      , nested  : {\n            age   : 2\n          , cool  : DocumentObjectId.fromString('4cf70857337498f95900001c')\n          , deep  : { x: 'yay' }\n        }\n    });\n\n    assert.equal('toop', doc2.test);\n    assert.ok(doc2.oids instanceof Array);\n    assert.equal(doc2.nested.age, 2);\n\n    // GH-366\n    assert.equal(doc2.nested.bonk, undefined);\n    assert.equal(doc2.nested.nested, undefined);\n    assert.equal(doc2.nested.test, undefined);\n    assert.equal(doc2.nested.age.test, undefined);\n    assert.equal(doc2.nested.age.nested, undefined);\n    assert.equal(doc2.oids.nested, undefined);\n    assert.equal(doc2.nested.deep.x, 'yay');\n    assert.equal(doc2.nested.deep.nested, undefined);\n    assert.equal(doc2.nested.deep.cool, undefined);\n    assert.equal(doc2.nested2.yup.nested, undefined);\n    assert.equal(doc2.nested2.yup.nested2, undefined);\n    assert.equal(doc2.nested2.yup.yup, undefined);\n    assert.equal(doc2.nested2.yup.age, undefined);\n    assert.equal('object', typeof doc2.nested2.yup);\n\n    doc2.nested2.yup = {\n        age: 150\n      , yup: \"Yesiree\"\n      , nested: true\n    };\n\n    assert.equal(doc2.nested2.nested, undefined);\n    assert.equal(doc2.nested2.yup.nested, true);\n    assert.equal(doc2.nested2.yup.yup, \"Yesiree\");\n    assert.equal(doc2.nested2.yup.age, 150);\n    doc2.nested2.nested = \"y\";\n    assert.equal(doc2.nested2.nested, \"y\");\n    assert.equal(doc2.nested2.yup.nested, true);\n    assert.equal(doc2.nested2.yup.yup, \"Yesiree\");\n    assert.equal(150, doc2.nested2.yup.age);\n\n    assert.equal(DocumentObjectId.toString(doc2.nested.cool), '4cf70857337498f95900001c');\n\n    assert.ok(doc.oids !== doc2.oids);\n  });\n\n  it('test shortcut setters', function(){\n    var doc = new TestDocument();\n\n    doc.init({\n        test    : 'Test'\n      , nested  : {\n            age   : 5\n        }\n    });\n\n    assert.equal(doc.isModified('test'), false);\n    doc.test = 'Woot';\n    assert.equal('Woot', doc.test);\n    assert.equal(true, doc.isModified('test'));\n\n    assert.equal(doc.isModified('nested.age'),false);\n    doc.nested.age = 2;\n    assert.equal(2,doc.nested.age);\n    assert.ok(doc.isModified('nested.age'));\n\n    doc.nested = { path: 'overwrite the entire nested object' };\n    assert.equal(undefined, doc.nested.age);\n    assert.equal(1, Object.keys(doc._doc.nested).length);\n    assert.equal('overwrite the entire nested object', doc.nested.path);\n    assert.ok(doc.isModified('nested'));\n  });\n\n  it('test accessor of id', function(){\n    var doc = new TestDocument();\n    assert.ok(doc._id instanceof DocumentObjectId);\n  });\n\n  it('test shortcut of id hexString', function(){\n    var doc = new TestDocument()\n      , _id = doc._id.toString();\n    assert.equal('string', typeof doc.id);\n  });\n\n  it('test toObject clone', function(){\n    var doc = new TestDocument();\n    doc.init({\n        test    : 'test'\n      , oids    : []\n      , nested  : {\n            age   : 5\n          , cool  : new DocumentObjectId\n        }\n    });\n\n    var copy = doc.toObject();\n\n    copy.test._marked = true;\n    copy.nested._marked = true;\n    copy.nested.age._marked = true;\n    copy.nested.cool._marked = true;\n\n    assert.equal(doc._doc.test._marked, undefined);\n    assert.equal(doc._doc.nested._marked, undefined);\n    assert.equal(doc._doc.nested.age._marked, undefined);\n    assert.equal(doc._doc.nested.cool._marked, undefined);\n  });\n\n  it('toObject options', function(){\n    var doc = new TestDocument();\n\n    doc.init({\n        test    : 'test'\n      , oids    : []\n      , em: [{title:'asdf'}]\n      , nested  : {\n            age   : 5\n          , cool  : DocumentObjectId.fromString('4c6c2d6240ced95d0e00003c')\n          , path  : 'my path'\n        }\n      , nested2: {}\n    });\n\n    var clone = doc.toObject({ getters: true, virtuals: false });\n\n    assert.equal(clone.test, 'test');\n    assert.ok(clone.oids instanceof Array);\n    assert.equal(5, clone.nested.age);\n    assert.equal(DocumentObjectId.toString(clone.nested.cool), '4c6c2d6240ced95d0e00003c');\n    assert.equal('5my path', clone.nested.path);\n    assert.equal(undefined, clone.nested.agePlus2);\n    assert.equal(undefined, clone.em[0].works);\n\n    clone = doc.toObject({ virtuals: true });\n\n    assert.equal('test', clone.test);\n    assert.ok(clone.oids instanceof Array);\n    assert.equal(5, clone.nested.age);\n    assert.equal(DocumentObjectId.toString(clone.nested.cool), '4c6c2d6240ced95d0e00003c');\n    assert.equal('my path', clone.nested.path);\n    assert.equal(7, clone.nested.agePlus2);\n    assert.equal(clone.em[0].works, 'em virtual works');\n\n    clone = doc.toObject({ getters: true });\n\n    assert.equal('test', clone.test);\n    assert.ok(clone.oids instanceof Array);\n    assert.equal(5, clone.nested.age);\n    assert.equal(DocumentObjectId.toString(clone.nested.cool),'4c6c2d6240ced95d0e00003c');\n    assert.equal('5my path', clone.nested.path);\n    assert.equal(7, clone.nested.agePlus2);\n    assert.equal('em virtual works', clone.em[0].works);\n\n    // test toObject options\n    doc.schema.options.toObject = { virtuals: true };\n    clone = doc.toObject();\n    assert.equal('test', clone.test);\n    assert.ok(clone.oids instanceof Array);\n    assert.equal(5, clone.nested.age);\n    assert.equal(DocumentObjectId.toString(clone.nested.cool),'4c6c2d6240ced95d0e00003c');\n\n    assert.equal('my path', clone.nested.path);\n    assert.equal(7, clone.nested.agePlus2);\n    assert.equal('asdf', clone.em[0].title);\n    delete doc.schema.options.toObject;\n\n    // minimize\n    clone = doc.toObject({ minimize: true });\n    assert.equal(undefined, clone.nested2);\n    clone = doc.toObject({ minimize: false });\n    assert.equal('Object', clone.nested2.constructor.name);\n    assert.equal(1, Object.keys(clone.nested2).length);\n    clone = doc.toObject('2');\n    assert.equal(undefined, clone.nested2);\n\n    doc.schema.options.toObject = { minimize: false };\n    clone = doc.toObject();\n    assert.equal('Object', clone.nested2.constructor.name);\n    assert.equal(1, Object.keys(clone.nested2).length);\n    delete doc.schema.options.toObject;\n\n    doc.schema.options.minimize = false;\n    clone = doc.toObject();\n    assert.equal('Object', clone.nested2.constructor.name);\n    assert.equal(1, Object.keys(clone.nested2).length);\n    doc.schema.options.minimize = true;\n    clone = doc.toObject();\n    assert.equal(undefined, clone.nested2);\n  })\n\n  it('toJSON options', function(){\n    var doc = new TestDocument();\n\n    doc.init({\n        test    : 'test'\n      , oids    : []\n      , em: [{title:'asdf'}]\n      , nested  : {\n            age   : 5\n          , cool  : DocumentObjectId.fromString('4c6c2d6240ced95d0e00003c')\n          , path  : 'my path'\n        }\n      , nested2: {}\n    });\n\n    // override to check if toJSON gets fired\n    var path = TestDocument.prototype.schema.path('em');\n    path.casterConstructor.prototype.toJSON = function () {\n      return {};\n    }\n\n    doc.schema.options.toJSON = { virtuals: true };\n    var clone = doc.toJSON();\n    assert.equal('test', clone.test);\n    assert.ok(clone.oids instanceof Array);\n    assert.equal(5, clone.nested.age);\n    assert.equal(DocumentObjectId.toString(clone.nested.cool),'4c6c2d6240ced95d0e00003c');\n    assert.equal('my path', clone.nested.path);\n    assert.equal(7, clone.nested.agePlus2);\n    assert.equal('Object', clone.em[0].constructor.name);\n    assert.equal(0, Object.keys(clone.em[0]).length);\n    delete doc.schema.options.toJSON;\n    delete path.casterConstructor.prototype.toJSON;\n\n    doc.schema.options.toJSON = { minimize: false };\n    clone = doc.toJSON();\n    assert.equal('Object', clone.nested2.constructor.name);\n    assert.equal(1, Object.keys(clone.nested2).length);\n    clone = doc.toJSON('8');\n    assert.equal('Object', clone.nested2.constructor.name);\n    assert.equal(1, Object.keys(clone.nested2).length);\n\n    // gh-852\n    var arr = [doc]\n      , err = false\n      , str\n    try {\n      str = JSON.stringify(arr);\n    } catch (_) { err = true; }\n    assert.equal(false, err);\n    assert.ok(/nested2/.test(str));\n    assert.equal('Object', clone.nested2.constructor.name);\n    assert.equal(1, Object.keys(clone.nested2).length);\n\n    delete doc.schema.options.toJSON;\n  });\n\n  it('jsonifying an object', function(){\n    var doc = new TestDocument({ test: 'woot' })\n      , oidString = DocumentObjectId.toString(doc._id);\n\n    // convert to json string\n    var json = JSON.stringify(doc);\n\n    // parse again\n    var obj = JSON.parse(json);\n\n    assert.equal('woot', obj.test);\n    assert.equal(obj._id, oidString);\n  });\n\n  it('calling update on document should relay to its model (gh-794)', function(done){\n    var db = start();\n    var Docs = new Schema({text:String});\n    var docs = db.model('docRelayUpdate', Docs);\n    var d = new docs({text:'A doc'});\n    var called = false;\n    d.save(function () {\n      var oldUpdate = docs.update;\n      docs.update = function (query, operation) {\n        assert.equal(1, Object.keys(query).length);\n        assert.equal(query._id, d._id);\n        assert.equal(1, Object.keys(operation).length);\n        assert.equal(1, Object.keys(operation.$set).length);\n        assert.equal(operation.$set.text, 'A changed doc');\n        called = true;\n        docs.update = oldUpdate;\n        oldUpdate.apply(docs, arguments);\n      };\n      d.update({$set :{text: 'A changed doc'}}, function (err) {\n        db.close();\n        assert.ifError(err);\n        assert.equal(true, called);\n        done();\n      });\n    });\n\n  });\n\n  it('toObject should not set undefined values to null', function(){\n    var doc = new TestDocument()\n      , obj = doc.toObject();\n\n    delete obj._id;\n    assert.deepEqual(obj, { numbers: [], oids: [], em: [] });\n  })\n\n  describe('Errors', function(){\n    it('MongooseErrors should be instances of Error (gh-209)', function(){\n      var MongooseError = require('../lib/error')\n        , err = new MongooseError(\"Some message\");\n      assert.ok(err instanceof Error);\n    });\n    it('ValidationErrors should be instances of Error', function(){\n      var ValidationError = Document.ValidationError\n        , err = new ValidationError(new TestDocument);\n      assert.ok(err instanceof Error);\n    });\n  });\n\n  it('methods on embedded docs should work', function(){\n    var db = start()\n      , ESchema = new Schema({ name: String })\n\n    ESchema.methods.test = function () {\n      return this.name + ' butter';\n    }\n    ESchema.statics.ten = function () {\n      return 10;\n    }\n\n    var E = db.model('EmbeddedMethodsAndStaticsE', ESchema);\n    var PSchema = new Schema({ embed: [ESchema] });\n    var P = db.model('EmbeddedMethodsAndStaticsP', PSchema);\n    db.close();\n\n    var p = new P({ embed: [{name: 'peanut'}] });\n    assert.equal('function', typeof p.embed[0].test);\n    assert.equal('function', typeof E.ten);\n    assert.equal('peanut butter', p.embed[0].test());\n    assert.equal(10, E.ten());\n\n    // test push casting\n    p = new P;\n    p.embed.push({name: 'apple'});\n    assert.equal('function', typeof p.embed[0].test);\n    assert.equal('function', typeof E.ten);\n    assert.equal('apple butter', p.embed[0].test());\n  });\n\n  it('setting a positional path does not cast value to array', function(){\n    var doc = new TestDocument;\n    doc.init({ numbers: [1,3] });\n    assert.equal(1, doc.numbers[0]);\n    assert.equal(3, doc.numbers[1]);\n    doc.set('numbers.1', 2);\n    assert.equal(1, doc.numbers[0]);\n    assert.equal(2, doc.numbers[1]);\n  });\n\n  it('no maxListeners warning should occur', function(){\n    var db = start();\n\n    var traced = false;\n    var trace = console.trace;\n\n    console.trace = function () {\n      traced = true;\n      console.trace = trace;\n    }\n\n    var schema = new Schema({\n        title: String\n      , embed1: [new Schema({name:String})]\n      , embed2: [new Schema({name:String})]\n      , embed3: [new Schema({name:String})]\n      , embed4: [new Schema({name:String})]\n      , embed5: [new Schema({name:String})]\n      , embed6: [new Schema({name:String})]\n      , embed7: [new Schema({name:String})]\n      , embed8: [new Schema({name:String})]\n      , embed9: [new Schema({name:String})]\n      , embed10: [new Schema({name:String})]\n      , embed11: [new Schema({name:String})]\n    });\n\n    var S = db.model('noMaxListeners', schema);\n\n    var s = new S({ title: \"test\" });\n    db.close();\n    assert.equal(false, traced);\n  });\n\n  it('isSelected()', function(){\n    var doc = new TestDocument();\n\n    doc.init({\n        test    : 'test'\n      , numbers : [4,5,6,7]\n      , nested  : {\n            age   : 5\n          , cool  : DocumentObjectId.fromString('4c6c2d6240ced95d0e00003c')\n          , path  : 'my path'\n          , deep  : { x: 'a string' }\n        }\n      , notapath: 'i am not in the schema'\n      , em: [{ title: 'gocars' }]\n    });\n\n    assert.ok(doc.isSelected('_id'));\n    assert.ok(doc.isSelected('test'));\n    assert.ok(doc.isSelected('numbers'));\n    assert.ok(doc.isSelected('oids')); // even if no data\n    assert.ok(doc.isSelected('nested'));\n    assert.ok(doc.isSelected('nested.age'));\n    assert.ok(doc.isSelected('nested.cool'));\n    assert.ok(doc.isSelected('nested.path'));\n    assert.ok(doc.isSelected('nested.deep'));\n    assert.ok(doc.isSelected('nested.nope')); // not a path\n    assert.ok(doc.isSelected('nested.deep.x'));\n    assert.ok(doc.isSelected('nested.deep.x.no'));\n    assert.ok(doc.isSelected('nested.deep.y')); // not a path\n    assert.ok(doc.isSelected('noway')); // not a path\n    assert.ok(doc.isSelected('notapath')); // not a path but in the _doc\n    assert.ok(doc.isSelected('em'));\n    assert.ok(doc.isSelected('em.title'));\n    assert.ok(doc.isSelected('em.body'));\n    assert.ok(doc.isSelected('em.nonpath')); // not a path\n\n    var selection = {\n        'test': 1\n      , 'numbers': 1\n      , 'nested.deep': 1\n      , 'oids': 1\n    }\n\n    doc = new TestDocument(undefined, selection);\n\n    doc.init({\n        test    : 'test'\n      , numbers : [4,5,6,7]\n      , nested  : {\n            deep  : { x: 'a string' }\n        }\n    });\n\n    assert.ok(doc.isSelected('_id'))\n    assert.ok(doc.isSelected('test'))\n    assert.ok(doc.isSelected('numbers'))\n    assert.ok(doc.isSelected('oids')); // even if no data\n    assert.ok(doc.isSelected('nested'));\n    assert.ok(!doc.isSelected('nested.age'))\n    assert.ok(!doc.isSelected('nested.cool'))\n    assert.ok(!doc.isSelected('nested.path'))\n    assert.ok(doc.isSelected('nested.deep'))\n    assert.ok(!doc.isSelected('nested.nope'))\n    assert.ok(doc.isSelected('nested.deep.x'));\n    assert.ok(doc.isSelected('nested.deep.x.no'))\n    assert.ok(doc.isSelected('nested.deep.y'))\n    assert.ok(!doc.isSelected('noway'))\n    assert.ok(!doc.isSelected('notapath'))\n    assert.ok(!doc.isSelected('em'))\n    assert.ok(!doc.isSelected('em.title'))\n    assert.ok(!doc.isSelected('em.body'))\n    assert.ok(!doc.isSelected('em.nonpath'))\n\n    var selection = {\n        'em.title': 1\n    }\n\n    doc = new TestDocument(undefined, selection);\n\n    doc.init({\n        em: [{ title: 'one' }]\n    });\n\n    assert.ok(doc.isSelected('_id'))\n    assert.ok(!doc.isSelected('test'))\n    assert.ok(!doc.isSelected('numbers'))\n    assert.ok(!doc.isSelected('oids'))\n    assert.ok(!doc.isSelected('nested'))\n    assert.ok(!doc.isSelected('nested.age'))\n    assert.ok(!doc.isSelected('nested.cool'))\n    assert.ok(!doc.isSelected('nested.path'))\n    assert.ok(!doc.isSelected('nested.deep'))\n    assert.ok(!doc.isSelected('nested.nope'))\n    assert.ok(!doc.isSelected('nested.deep.x'))\n    assert.ok(!doc.isSelected('nested.deep.x.no'))\n    assert.ok(!doc.isSelected('nested.deep.y'))\n    assert.ok(!doc.isSelected('noway'))\n    assert.ok(!doc.isSelected('notapath'))\n    assert.ok(doc.isSelected('em'))\n    assert.ok(doc.isSelected('em.title'))\n    assert.ok(!doc.isSelected('em.body'))\n    assert.ok(!doc.isSelected('em.nonpath'))\n\n    var selection = {\n        'em': 0\n    }\n\n    doc = new TestDocument(undefined, selection);\n    doc.init({\n        test    : 'test'\n      , numbers : [4,5,6,7]\n      , nested  : {\n            age   : 5\n          , cool  : DocumentObjectId.fromString('4c6c2d6240ced95d0e00003c')\n          , path  : 'my path'\n          , deep  : { x: 'a string' }\n        }\n      , notapath: 'i am not in the schema'\n    });\n\n    assert.ok(doc.isSelected('_id'))\n    assert.ok(doc.isSelected('test'))\n    assert.ok(doc.isSelected('numbers'))\n    assert.ok(doc.isSelected('oids'))\n    assert.ok(doc.isSelected('nested'))\n    assert.ok(doc.isSelected('nested.age'))\n    assert.ok(doc.isSelected('nested.cool'))\n    assert.ok(doc.isSelected('nested.path'))\n    assert.ok(doc.isSelected('nested.deep'))\n    assert.ok(doc.isSelected('nested.nope'))\n    assert.ok(doc.isSelected('nested.deep.x'))\n    assert.ok(doc.isSelected('nested.deep.x.no'))\n    assert.ok(doc.isSelected('nested.deep.y'))\n    assert.ok(doc.isSelected('noway'))\n    assert.ok(doc.isSelected('notapath'));\n    assert.ok(!doc.isSelected('em'));\n    assert.ok(!doc.isSelected('em.title'));\n    assert.ok(!doc.isSelected('em.body'));\n    assert.ok(!doc.isSelected('em.nonpath'));\n\n    var selection = {\n        '_id': 0\n    }\n\n    doc = new TestDocument(undefined, selection);\n    doc.init({\n        test    : 'test'\n      , numbers : [4,5,6,7]\n      , nested  : {\n            age   : 5\n          , cool  : DocumentObjectId.fromString('4c6c2d6240ced95d0e00003c')\n          , path  : 'my path'\n          , deep  : { x: 'a string' }\n        }\n      , notapath: 'i am not in the schema'\n    });\n\n    assert.ok(!doc.isSelected('_id'))\n    assert.ok(doc.isSelected('nested.deep.x.no'));\n\n    doc = new TestDocument({ test: 'boom' });\n    assert.ok(doc.isSelected('_id'))\n    assert.ok(doc.isSelected('test'))\n    assert.ok(doc.isSelected('numbers'))\n    assert.ok(doc.isSelected('oids'))\n    assert.ok(doc.isSelected('nested'))\n    assert.ok(doc.isSelected('nested.age'))\n    assert.ok(doc.isSelected('nested.cool'))\n    assert.ok(doc.isSelected('nested.path'))\n    assert.ok(doc.isSelected('nested.deep'))\n    assert.ok(doc.isSelected('nested.nope'))\n    assert.ok(doc.isSelected('nested.deep.x'))\n    assert.ok(doc.isSelected('nested.deep.x.no'))\n    assert.ok(doc.isSelected('nested.deep.y'))\n    assert.ok(doc.isSelected('noway'))\n    assert.ok(doc.isSelected('notapath'))\n    assert.ok(doc.isSelected('em'))\n    assert.ok(doc.isSelected('em.title'))\n    assert.ok(doc.isSelected('em.body'))\n    assert.ok(doc.isSelected('em.nonpath'));\n\n    var selection = {\n        '_id': 1\n    }\n\n    doc = new TestDocument(undefined, selection);\n    doc.init({ _id: 'test' });\n\n    assert.ok(doc.isSelected('_id'));\n    assert.ok(!doc.isSelected('test'));\n\n    doc = new TestDocument({ test: 'boom' }, true);\n    assert.ok(doc.isSelected('_id'));\n    assert.ok(doc.isSelected('test'));\n    assert.ok(doc.isSelected('numbers'));\n    assert.ok(doc.isSelected('oids'));\n    assert.ok(doc.isSelected('nested'));\n    assert.ok(doc.isSelected('nested.age'));\n    assert.ok(doc.isSelected('nested.cool'));\n    assert.ok(doc.isSelected('nested.path'));\n    assert.ok(doc.isSelected('nested.deep'));\n    assert.ok(doc.isSelected('nested.nope'));\n    assert.ok(doc.isSelected('nested.deep.x'));\n    assert.ok(doc.isSelected('nested.deep.x.no'));\n    assert.ok(doc.isSelected('nested.deep.y'));\n    assert.ok(doc.isSelected('noway'));\n    assert.ok(doc.isSelected('notapath'));\n    assert.ok(doc.isSelected('em'));\n    assert.ok(doc.isSelected('em.title'));\n    assert.ok(doc.isSelected('em.body'));\n    assert.ok(doc.isSelected('em.nonpath'));\n  })\n\n  it('unselected required fields should pass validation', function(){\n    var db = start()\n      , Tschema = new Schema({ name: String, req: { type: String, required: true }})\n      , T = db.model('unselectedRequiredFieldValidation', Tschema);\n\n    var t = new T({ name: 'teeee', req: 'i am required' });\n    t.save(function (err) {\n      assert.ifError(err);\n      T.findById(t).select('name').exec(function (err, t) {\n        assert.ifError(err);\n        assert.equal(undefined, t.req);\n        t.name = 'wooo';\n        t.save(function (err) {\n          assert.ifError(err);\n\n          T.findById(t).select('name').exec(function (err, t) {\n            assert.ifError(err);\n            t.req = undefined;\n            t.save(function (err) {\n              err = String(err);\n              var invalid  = /Validator \"required\" failed for path req/.test(err);\n              assert.ok(invalid);\n              t.req = 'it works again'\n              t.save(function (err) {\n                assert.ifError(err);\n\n                T.findById(t).select('_id').exec(function (err, t) {\n                  assert.ifError(err);\n                  t.save(function (err) {\n                    db.close();\n                    assert.ifError(err);\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  })\n\n  describe('#validate', function(){\n    var collection = 'validateschema_'+random();\n\n    it('works (gh-891)', function(done){\n      var db = start()\n        , schema = null\n        , called = false\n\n      var validate = [function(str){ called = true; return true }, 'BAM'];\n\n      schema = new Schema({\n          prop: { type: String, required: true, validate: validate }\n        , nick: { type: String, required: true }\n      });\n\n      var M = db.model('validateSchema', schema, collection);\n      var m = new M({ prop: 'gh891', nick: 'validation test' });\n      m.save(function (err) {\n        assert.ifError(err);\n        assert.equal(true, called);\n        called = false;\n        M.findById(m, 'nick', function (err, m) {\n          assert.equal(false, called);\n          assert.ifError(err);\n          m.nick = 'gh-891';\n          m.save(function (err) {\n            assert.equal(false, called);\n            assert.ifError(err);\n            done();\n          })\n        })\n      })\n    })\n\n    describe('works on arrays', function(){\n      var db;\n      before(function(done){\n        db = start()\n        done();\n      })\n      after(function(done){\n        db.close(done)\n      })\n\n      it('with required', function(done){\n        var schema = new Schema({\n            name: String\n          , arr : { type: [], required: true}\n        });\n        var M = db.model('validateSchema-array1', schema, collection);\n        var m = new M({ name: 'gh1109-1' });\n        m.save(function (err) {\n          assert.ok(/\"required\" failed for path arr/.test(err));\n          m.arr = [];\n          m.save(function (err) {\n            assert.ok(/\"required\" failed for path arr/.test(err));\n            m.arr.push('works');\n            m.save(function (err) {\n              assert.ifError(err);\n              done();\n            })\n          })\n        })\n      })\n\n      it('with custom validator', function(done){\n        var called = false;\n\n        function validator (val) {\n          called = true;\n          return val && val.length > 1\n        }\n\n        var validate = [validator, 'BAM'];\n\n        var schema = new Schema({\n            arr : { type: [], validate: validate }\n        });\n\n        var M = db.model('validateSchema-array2', schema, collection);\n        var m = new M({ name: 'gh1109-2', arr: [1] });\n        assert.equal(false, called);\n        m.save(function (err) {\n          assert.ok(/\"BAM\" failed for path arr/.test(err));\n          assert.equal(true, called);\n          m.arr.push(2);\n          called = false;\n          m.save(function (err) {\n            assert.equal(true, called);\n            assert.ifError(err);\n            done()\n          })\n        })\n      })\n\n      it('with both required + custom validator', function(done){\n        function validator (val) {\n          called = true;\n          return val && val.length > 1\n        }\n\n        var validate = [validator, 'BAM'];\n\n        var called = false;\n\n        var schema = new Schema({\n          arr : { type: [], required: true, validate: validate }\n        });\n\n        var M = db.model('validateSchema-array3', schema, collection);\n        var m = new M({ name: 'gh1109-3' });\n        m.save(function (err) {\n          assert.ok(/\"required\" failed for path arr/.test(err));\n          m.arr.push({nice: true});\n          m.save(function (err) {\n            assert.ok(/\"BAM\" failed for path arr/.test(err));\n            m.arr.push(95);\n            m.save(function (err) {\n              assert.ifError(err);\n              done()\n            })\n          })\n        })\n      })\n\n    })\n  })\n\n  it('#invalidate', function(done){\n    var db = start()\n      , InvalidateSchema = null\n      , Post = null\n      , post = null;\n\n    InvalidateSchema = new Schema({\n      prop: { type: String },\n    }, { strict: false });\n\n    mongoose.model('InvalidateSchema', InvalidateSchema);\n\n    Post = db.model('InvalidateSchema');\n    post = new Post();\n    post.set({baz: 'val'});\n    post.invalidate('baz', 'reason');\n\n    post.save(function(err){\n      assert.ok(err instanceof MongooseError);\n      assert.ok(err instanceof ValidationError);\n      assert.ok(err.errors.baz instanceof ValidatorError);\n      assert.equal(err.errors.baz.message,'Validator \"reason\" failed for path baz');\n      assert.equal(err.errors.baz.type,'reason');\n      assert.equal(err.errors.baz.path,'baz');\n\n      post.save(function(err){\n        db.close();\n        assert.strictEqual(err, null);\n        done();\n      });\n    });\n  });\n\n  describe('#equals', function(){\n    describe('should work', function(){\n      var db = start();\n      var S = db.model('equals-S', new Schema({ _id: String }));\n      var N = db.model('equals-N', new Schema({ _id: Number }));\n      var O = db.model('equals-O', new Schema({ _id: Schema.ObjectId }));\n\n      it('with string _ids', function(){\n        var s1 = new S({ _id: 'one' });\n        var s2 = new S({ _id: 'one' });\n        assert.ok(s1.equals(s2));\n      })\n      it('with number _ids', function(){\n        var n1 = new N({ _id: 0 });\n        var n2 = new N({ _id: 0 });\n        assert.ok(n1.equals(n2));\n      })\n      it('with ObjectId _ids', function(){\n        var id = new mongoose.Types.ObjectId;\n        var o1 = new O({ _id: id });\n        var o2 = new O({ _id: id });\n        assert.ok(o1.equals(o2));\n\n        id = String(new mongoose.Types.ObjectId);\n        o1 = new O({ _id: id });\n        o2 = new O({ _id: id });\n        assert.ok(o1.equals(o2));\n      })\n\n      after(function () {\n        db.close();\n      })\n    })\n  })\n\n  describe('setter', function(){\n    describe('order', function(){\n      it('is applied correctly', function(){\n        var date = 'Thu Aug 16 2012 09:45:59 GMT-0700';\n        var d = new TestDocument();\n        dateSetterCalled = false;\n        d.date = date;\n        assert.ok(dateSetterCalled);\n        dateSetterCalled = false;\n        assert.ok(d._doc.date instanceof Date);\n        assert.ok(d.date instanceof Date);\n        assert.equal(+d.date, +new Date(date));\n      })\n    })\n\n    describe('on nested paths', function(){\n      describe('using set(path, object)', function(){\n        it('overwrites the entire object', function(){\n          var doc = new TestDocument();\n\n          doc.init({\n              test    : 'Test'\n            , nested  : {\n                  age   : 5\n              }\n          });\n\n          doc.set('nested', { path: 'overwrite the entire nested object' });\n          assert.equal(undefined, doc.nested.age);\n          assert.equal(1, Object.keys(doc._doc.nested).length);\n          assert.equal('overwrite the entire nested object', doc.nested.path);\n          assert.ok(doc.isModified('nested'));\n\n          // vs merging using doc.set(object)\n          doc.set({ test: 'Test', nested: { age: 4 }});\n          assert.equal('4overwrite the entire nested object', doc.nested.path);\n          assert.equal(4, doc.nested.age);\n          assert.equal(2, Object.keys(doc._doc.nested).length);\n          assert.ok(doc.isModified('nested'));\n\n          var doc = new TestDocument();\n          doc.init({\n              test    : 'Test'\n            , nested  : {\n                  age   : 5\n              }\n          });\n\n          doc.set({ test: 'Test', nested: { age: 5 }});\n          assert.ok(!doc.isModified());\n          assert.ok(!doc.isModified('test'));\n          assert.ok(!doc.isModified('nested'));\n          assert.ok(!doc.isModified('nested.age'));\n\n          doc.nested = { path: 'overwrite the entire nested object', age: 5 };\n          assert.equal(5, doc.nested.age);\n          assert.equal(2, Object.keys(doc._doc.nested).length);\n          assert.equal('5overwrite the entire nested object', doc.nested.path);\n          assert.ok(doc.isModified('nested'));\n\n          doc.nested.deep = { x: 'Hank and Marie' };\n          assert.equal(3, Object.keys(doc._doc.nested).length);\n          assert.equal('5overwrite the entire nested object', doc.nested.path);\n          assert.ok(doc.isModified('nested'));\n          assert.equal('Hank and Marie', doc.nested.deep.x);\n\n          var doc = new TestDocument();\n          doc.init({\n              test    : 'Test'\n            , nested  : {\n                  age   : 5\n              }\n          });\n\n          doc.set('nested.deep', { x: 'Hank and Marie' });\n          assert.equal(2, Object.keys(doc._doc.nested).length);\n          assert.equal(1, Object.keys(doc._doc.nested.deep).length);\n          assert.ok(doc.isModified('nested'));\n          assert.ok(!doc.isModified('nested.path'));\n          assert.ok(!doc.isModified('nested.age'));\n          assert.ok(doc.isModified('nested.deep'));\n          assert.equal('Hank and Marie', doc.nested.deep.x);\n        })\n      })\n    })\n\n  })\n})\n"]],"start1":0,"start2":0,"length1":0,"length2":32578}]],"length":32578}
