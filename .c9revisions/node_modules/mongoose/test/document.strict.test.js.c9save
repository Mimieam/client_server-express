{"ts":1352899735573,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/**\n * Test dependencies.\n */\n\nvar start = require('./common')\n  , mongoose = start.mongoose\n  , assert = require('assert')\n  , random = require('../lib/utils').random\n  , Query = require('../lib/query')\n  , Schema = mongoose.Schema\n  , SchemaType = mongoose.SchemaType\n  , CastError = SchemaType.CastError\n  , ValidatorError = SchemaType.ValidatorError\n  , ValidationError = mongoose.Document.ValidationError\n  , ObjectId = Schema.ObjectId\n  , DocumentObjectId = mongoose.Types.ObjectId\n  , DocumentArray = mongoose.Types.DocumentArray\n  , EmbeddedDocument = mongoose.Types.Embedded\n  , MongooseNumber = mongoose.Types.Number\n  , MongooseArray = mongoose.Types.Array\n  , MongooseError = mongoose.Error;\n\ndescribe('document: strict mode:', function(){\n  it('should work', function(done){\n    var db = start();\n\n    var lax = new Schema({\n        ts  : { type: Date, default: Date.now }\n      , content: String\n    }, { strict: false });\n\n    var strict = new Schema({\n        ts  : { type: Date, default: Date.now }\n      , content: String\n    });\n\n    var Lax = db.model('Lax', lax);\n    var Strict = db.model('Strict', strict);\n\n    var l = new Lax({content: 'sample', rouge: 'data'});\n    assert.equal(false, l._strictMode);\n    l = l.toObject();\n    assert.equal('sample', l.content);\n    assert.equal('data', l.rouge);\n\n    var s = new Strict({content: 'sample', rouge: 'data'});\n    assert.equal(true, s._strictMode);\n    s = s.toObject();\n    assert.ok('ts' in s);\n    assert.equal('sample', s.content);\n    assert.ok(!('rouge' in s));\n    assert.ok(!s.rouge);\n\n    // instance override\n    var instance = new Lax({content: 'sample', rouge: 'data'}, true);\n    assert.ok(instance._strictMode);\n    instance = instance.toObject();\n    assert.equal('sample', instance.content);\n    assert.ok(!instance.rouge);\n    assert.ok('ts' in instance);\n\n    // hydrate works as normal, but supports the schema level flag.\n    var s2 = new Strict({content: 'sample', rouge: 'data'}, false);\n    assert.equal(false, s2._strictMode);\n    s2 = s2.toObject();\n    assert.ok('ts' in s2);\n    assert.equal('sample', s2.content);\n    assert.ok('rouge' in s2);\n\n    // testing init\n    var s3 = new Strict();\n    s3.init({content: 'sample', rouge: 'data'});\n    var s3obj = s3.toObject();\n    assert.equal('sample', s3.content);\n    assert.ok(!('rouge' in s3));\n    assert.ok(!s3.rouge);\n\n    // strict on create\n    Strict.create({content: 'sample2', rouge: 'data'}, function(err, doc){\n      db.close();\n      assert.equal('sample2', doc.content);\n      assert.ok(!('rouge' in doc));\n      assert.ok(!doc.rouge);\n      done();\n    });\n  })\n  it('nested doc', function(){\n    var db = start();\n\n    var lax = new Schema({\n        name: { last: String }\n    }, { strict: false });\n\n    var strict = new Schema({\n        name: { last: String }\n    });\n\n    var Lax = db.model('NestedLax', lax, 'nestdoc'+random());\n    var Strict = db.model('NestedStrict', strict, 'nestdoc'+random());\n\n    db.close();\n\n    var l = new Lax;\n    l.set('name', { last: 'goose', hack: 'xx' });\n    l = l.toObject();\n    assert.equal('goose', l.name.last);\n    assert.equal('xx', l.name.hack);\n\n    var s = new Strict;\n    s.set({ name: { last: 'goose', hack: 'xx' }});\n    s = s.toObject();\n    assert.equal('goose', s.name.last);\n    assert.ok(!('hack' in s.name));\n    assert.ok(!s.name.hack);\n\n    s = new Strict;\n    s.set('name', { last: 'goose', hack: 'xx' });\n    s.set('shouldnt.exist', ':(');\n    s = s.toObject();\n    assert.equal('goose', s.name.last);\n    assert.ok(!('hack' in s.name));\n    assert.ok(!s.name.hack);\n    assert.ok(!s.shouldnt);\n  })\n  it('sub doc', function(done){\n    var db = start();\n\n    var lax = new Schema({\n        ts  : { type: Date, default: Date.now }\n      , content: String\n    }, { strict: false });\n\n    var strict = new Schema({\n        ts  : { type: Date, default: Date.now }\n      , content: String\n    });\n\n    var Lax = db.model('EmbeddedLax', new Schema({ dox: [lax] }, { strict: false }), 'embdoc'+random());\n    var Strict = db.model('EmbeddedStrict', new Schema({ dox: [strict] }, { strict: false }), 'embdoc'+random());\n\n    var l = new Lax({ dox: [{content: 'sample', rouge: 'data'}] });\n    assert.equal(false, l.dox[0]._strictMode);\n    l = l.dox[0].toObject();\n    assert.equal('sample', l.content);\n    assert.equal('data', l.rouge);\n    assert.ok(l.rouge);\n\n    var s = new Strict({ dox: [{content: 'sample', rouge: 'data'}] });\n    assert.equal(true, s.dox[0]._strictMode);\n    s = s.dox[0].toObject();\n    assert.ok('ts' in s);\n    assert.equal('sample', s.content);\n    assert.ok(!('rouge' in s));\n    assert.ok(!s.rouge);\n\n    // testing init\n    var s3 = new Strict();\n    s3.init({dox: [{content: 'sample', rouge: 'data'}]});\n    var s3obj = s3.toObject();\n    assert.equal('sample', s3.dox[0].content);\n    assert.ok(!('rouge' in s3.dox[0]));\n    assert.ok(!s3.dox[0].rouge);\n\n    // strict on create\n    Strict.create({dox:[{content: 'sample2', rouge: 'data'}]}, function(err, doc){\n      db.close();\n      assert.equal('sample2', doc.dox[0].content);\n      assert.ok(!('rouge' in doc.dox[0]));\n      assert.ok(!doc.dox[0].rouge);\n      done();\n    });\n  })\n\n  it('virtuals', function(){\n    var db = start();\n\n    var getCount = 0\n      , setCount = 0;\n\n    var strictSchema = new Schema({\n        email: String\n      , prop: String\n    });\n\n    strictSchema\n    .virtual('myvirtual')\n    .get(function() {\n      getCount++;\n      return 'ok';\n    })\n    .set(function(v) {\n      setCount++;\n      this.prop = v;\n    });\n\n    var StrictModel = db.model('StrictVirtual', strictSchema);\n\n    var strictInstance = new StrictModel({\n        email: 'hunter@skookum.com'\n      , myvirtual: 'test'\n    });\n\n    db.close();\n    assert.equal(0, getCount);\n    assert.equal(1, setCount);\n\n    strictInstance.myvirtual = 'anotherone';\n    var myvirtual = strictInstance.myvirtual;\n\n    assert.equal(1, getCount);\n    assert.equal(2, setCount);\n  })\n})\n"]],"start1":0,"start2":0,"length1":0,"length2":5977}]],"length":5977}
