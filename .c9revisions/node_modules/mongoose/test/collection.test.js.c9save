{"ts":1352711579889,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nvar start = require('./common')\n  , mongoose = start.mongoose\n  , assert = require('assert')\n  , Collection = require('../lib/collection');\n\ndescribe('collections:', function(){\n  it('should buffer commands until connection is established', function(done){\n    var db = mongoose.createConnection()\n      , collection = db.collection('test-buffering-collection')\n      , connected = false\n      , inserted = false\n      , pending = 2\n\n    function finish () {\n      if (--pending) return;\n      assert.ok(connected);\n      assert.ok(inserted);\n      done();\n    }\n\n    collection.insert({ }, { safe: true }, function(){\n      assert.ok(connected);\n      inserted = true;\n      db.close();\n      finish();\n    });\n\n    var uri = 'mongodb://localhost/mongoose_test';\n    db.open(process.env.MONGOOSE_TEST_URI || uri, function(err){\n      connected = !err;\n      finish();\n    });\n  })\n\n  it('methods should that throw (unimplemented)', function(){\n    var collection = new Collection('test', mongoose.connection)\n      , thrown = false;\n\n    try {\n      collection.getIndexes();\n    } catch (e) {\n      assert.ok(/unimplemented/.test(e.message));\n      thrown = true;\n    }\n\n    assert.ok(thrown);\n    thrown = false;\n\n    try {\n      collection.update();\n    } catch (e) {\n      assert.ok(/unimplemented/.test(e.message));\n      thrown = true;\n    }\n\n    assert.ok(thrown);\n    thrown = false;\n\n    try {\n      collection.save();\n    } catch (e) {\n      assert.ok(/unimplemented/.test(e.message));\n      thrown = true;\n    }\n\n    assert.ok(thrown);\n    thrown = false;\n\n    try {\n      collection.insert();\n    } catch (e) {\n      assert.ok(/unimplemented/.test(e.message));\n      thrown = true;\n    }\n\n    assert.ok(thrown);\n    thrown = false;\n\n    try {\n      collection.find();\n    } catch (e) {\n      assert.ok(/unimplemented/.test(e.message));\n      thrown = true;\n    }\n\n    assert.ok(thrown);\n    thrown = false;\n\n    try {\n      collection.findOne();\n    } catch (e) {\n      assert.ok(/unimplemented/.test(e.message));\n      thrown = true;\n    }\n\n    assert.ok(thrown);\n    thrown = false;\n\n    try {\n      collection.findAndModify();\n    } catch (e) {\n      assert.ok(/unimplemented/.test(e.message));\n      thrown = true;\n    }\n\n    assert.ok(thrown);\n    thrown = false;\n\n    try {\n      collection.ensureIndex();\n    } catch (e) {\n      assert.ok(/unimplemented/.test(e.message));\n      thrown = true;\n    }\n\n    assert.ok(thrown);\n    thrown = false;\n  })\n})\n"]],"start1":0,"start2":0,"length1":0,"length2":2472}]],"length":2472}
