{"ts":1352897073008,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\n/**\n * Module dependencies.\n */\n\nvar start = require('../../common')\n  , assert = require('assert')\n  , mongoose = start.mongoose\n  , Schema = mongoose.Schema;\n\n/**\n * Setup.\n */\n\nmongoose.model('NativeDriverTest', new Schema({\n    title: String\n}));\n\n/**\n * Test.\n */\n\ndescribe('drivers: native:', function(){\n\n  it('sparse index works', function(done){\n    var db = start()\n      , NativeTestCollection = db.model('NativeDriverTest');\n\n    NativeTestCollection.collection.ensureIndex({ title: 1 }, { sparse: true }, function (err) {\n      assert.ifError(err);\n      NativeTestCollection.collection.getIndexes(function (err, indexes) {\n        db.close();\n        assert.ifError(err);\n        assert.ok(indexes instanceof Object);\n        assert.deepEqual(indexes.title_1, [['title', 1]]);\n        done();\n      });\n    });\n  });\n\n  it('traditional ensureIndex spec syntax for fields works', function(done){\n    var db = start()\n      , NativeTestCollection = db.model('NativeDriverTest');\n\n    NativeTestCollection.collection.ensureIndex([['a', 1]], function () {\n      db.close();\n      done();\n    });\n  });\n\n  it('unique index failure passes error', function(done){\n    var db = start()\n      , schema = new Schema({ title: String })\n      , NativeTestCollection = db.model('NativeDriverTestUnique', schema)\n\n    NativeTestCollection.create({ title: 'x' }, {title:'x'}, function (err) {\n      assert.ifError(err);\n\n      NativeTestCollection.collection.ensureIndex({ title: 1 }, { unique: true, safe: true }, function (err) {\n        db.close();\n        assert.ok(/E11000 duplicate key error index/.test(err.message));\n        done();\n      });\n    });\n  })\n\n})\n"]],"start1":0,"start2":0,"length1":0,"length2":1668}]],"length":1668}
