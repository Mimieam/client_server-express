{"ts":1351811915351,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"Error.stackTraceLimit = Infinity;\nvar out = process.argv.length < 3;\nfunction log () {\n  if (out) {\n    console.error.apply(console, arguments);\n  }\n}\n\nvar mongoose = require('../')\n  , Schema = mongoose.Schema;\n\nvar DocSchema = new Schema({\n    title: String\n});\n\nvar AllSchema = new Schema({\n    string: String\n  , number: Number\n  , date  : Date\n  , bool  : Boolean\n  , buffer: Buffer\n  , objectid: Schema.ObjectId\n  , array : Array\n  , strings: [String]\n  , numbers: [Number]\n  , dates  : [Date]\n  , bools  : [Boolean]\n  , buffers: [Buffer]\n  , objectids: [Schema.ObjectId]\n  , docs     : [DocSchema]\n});\n\nvar A = mongoose.model('A', AllSchema);\n\nvar numdocs = 0;\nvar totaltime = 0;\n\n// bench the normal way\n// the try building the doc into the document prototype\n// and using inheritance and bench that \n//\n// also, bench using listeners for each subdoc vs one \n// listener that knows about all subdocs and notifies\n// them.\n\nfunction run (label, fn) {\n  log('running %s', label);\n  var started = process.memoryUsage();\n  var start = new Date;\n  var total = 10000;\n  var i = total;\n  while (i--) {\n    a = fn();\n    if (i%2)\n      a.toObject({ depopulate: true });\n    else\n      a._delta();\n  }\n  var time = (new Date - start)/1000;\n  totaltime += time;\n  numdocs += total;\n  log(label + ' took %d seconds for %d docs (%d dps)', time, total, total/time);\n  var used = process.memoryUsage();\n  var res = {}\n  res.rss  = used.rss - started.rss;\n  res.heapTotal = used.heapTotal - started.heapTotal;\n  res.heapUsed = used.heapUsed - started.heapUsed;\n  log('change: ', res);\n  a = res = used = time = started = start = total = i = null\n  //console.error(((used.vsize - started.vsize) / 1048576)+' MB');\n}\n\nrun('string', function () {\n  return new A({\n      string: \"hello world\"\n  });\n})\nrun('number', function () {\n  return new A({\n      number: 444848484\n  });\n})\nrun('date', function () {\n  return new A({\n     date: new Date\n  });\n})\nrun('bool', function () {\n  return new A({\n     bool: true\n  });\n})\nrun('buffer', function () {\n  return new A({\n     buffer: new Buffer(0)\n  });\n})\nrun('objectid', function () {\n  return new A({\n     objectid: new mongoose.Types.ObjectId()\n  });\n})\nrun('array of mixed', function () {\n  return new A({\n     array: [4,{},[],\"asdfa\"]\n  });\n})\nrun('array of strings', function () {\n  return new A({\n     strings: [\"one\",\"two\",\"three\",\"four\"]\n  });\n})\nrun('array of numbers', function () {\n  return new A({\n     numbers:[72,6493,83984643,348282.55]\n  });\n})\nrun('array of dates', function () {\n  return new A({\n     dates:[new Date, new Date, new Date]\n  });\n})\nrun('array of bools', function () {\n  return new A({\n     bools:[true, false, false, true, true]\n  });\n})\nrun('array of buffers', function () {\n  return new A({\n     buffers: [new Buffer([33]), new Buffer([12])]\n  });\n})\nrun('array of objectids', function () {\n  return new A({\n     objectids: [new mongoose.Types.ObjectId]\n  });\n})\nrun('array of docs', function () {\n  return new A({\n     docs: [ {title: \"yo\"}, {title:\"nowafasdi0fas asjkdfla fa\" }]\n  });\n})\n\n//console.error(a.toObject({depopulate:true}));\nconsole.error('completed %d docs in %d seconds (%d dps)', numdocs, totaltime,numdocs/totaltime);\n\n// --trace-opt --trace-deopt --trace-bailout \n"]],"start1":0,"start2":0,"length1":0,"length2":3253}]],"length":3253}
