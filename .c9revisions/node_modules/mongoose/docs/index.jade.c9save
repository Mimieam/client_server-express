{"ts":1351811674896,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"doctype html\nhtml(lang='en')\n  head\n    meta(charset=\"utf-8\")\n    meta(name=\"viewport\", content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\")\n    title Mongoose Quick Start v#{package.version}\n    link(href='http://fonts.googleapis.com/css?family=Anonymous+Pro:400,700|Droid+Sans+Mono|Open+Sans:400,700|Linden+Hill|Quattrocento:400,700|News+Cycle:400,700|Antic+Slab|Cabin+Condensed:400,700', rel='stylesheet', type='text/css')\n    link(href='/docs/css/default.css', rel='stylesheet', type='text/css')\n    link(href='/docs/css/guide.css', rel='stylesheet', type='text/css')\n    style.\n  body.api\n    a#forkbanner(href=\"http://github.com/learnboost/mongoose\")\n      img(style=\"position: absolute; top: 0; right: 0; border: 0;\", src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png\", alt=\"Fork me on GitHub\")\n    #links\n      #header\n        h1\n          a(href=\"../index.html\")\n            .mongoose Mongoose\n      include includes/nav\n    #content\n      .module\n        h2 Getting Started\n        p\n          em\n            | First be sure you have \n            a(href=\"http://www.mongodb.org/downloads\") MongoDB\n            |  and \n            a(href=\"http://nodejs.org/\") Nodejs\n            |  installed.\n        p\n          | Now say we like fuzzy kittens and want to record every kitten we ever meet in MongoDB.\n          | The first thing we need to do is include mongoose in our project and open a connection.\n        :js\n          var mongoose = require('mongoose')\n            , db = mongoose.createConnection('localhost', 'test');\n        p We have a pending connection object to the test database running on localhost. We now need to get notified if we connect successfully or if a connection error occurs:\n        :js\n          db.on('error', console.error.bind(console, 'connection error:'));\n          db.once('open', function () {\n            // yay!\n          });\n        p Once our connection opens, our callback will be called. For brevity, let's assume that all following code is within this callback.\n        p\n          | With Mongoose, everything is derived from a \n          a(href=\"./api.html#schema_Schema\") Schema\n          | . Let's get a reference to it and define our kittens.\n        :js\n          var kittySchema = new mongoose.Schema({\n              name: String\n          })\n        p\n          | So far so good. We've got a schema with one property, \n          code name\n          | , which will be a \n          code String\n          | . The next step is compiling our schema into a \n          a(href=\"./api.html#model_Model\") model\n          | .\n        :js\n          var Kitten = db.model('Kitten', kittySchema)\n        p\n          | A model is a class with which we construct documents.\n          | In this case, each document will be a kitten with properties and behaviors as declared in our schema.\n          | Let's create a kitten document representing the little guy we just met on the sidewalk outside:\n        :js\n          var silence = new Kitten({ name: 'Silence' })\n          console.log(silence.name) // 'Silence'\n        p Kittens can meow, so let's take a look at how to add \"speak\" functionality to our documents:\n        :js\n          kittySchema.methods.speak = function () {\n            var greeting = this.name\n              ? \"Meow name is \" + this.name\n              : \"I don't have a name\"\n            console.log(greeting);\n          }\n\n          var Kitten = db.model('Kitten', kittySchema)\n        p\n          | Functions added to the \n          code methods\n          |  property of a schema get compiled into the Model prototype and exposed on each document instance:\n        :js\n          var fluffy = new Kitten({ name: 'fluffy' });\n          fluffy.speak() // \"Meow name is fluffy\"\n        p\n          | We have talking kittens! But we still haven't saved anything to MongoDB.\n          | Each document can be saved to the database by calling its \n          code save\n          |  method. The first argument to the callback will be an error if any occured.\n        :js\n          fluffy.save(function (err) {\n            if (err) // TODO handle the error\n            console.log('meow')\n          });\n        p\n          | Say time goes by and we want to display all the kittens we've seen.\n          | We can access all of the kitten documents through our Kitten model.\n        :js\n          Kitten.find(function (err, kittens) {\n            if (err) // TODO handle err\n            console.log(kittens)\n          })\n        p\n          | We just logged all of the kittens in our db to the console.\n          | If we want to filter our kittens by name, Mongoose supports MongoDbs rich querying syntax.\n        :js\n          Kitten.find({ name: /fluff/i }, callback)\n        p\n          | This performs a case-insensitive search for all documents with a name property containing \"fluff\" and returns the results to the callback.\n        h3 Congratulations\n        p\n          | That's the end of our quick start. We created a schema, added a custom document method, saved and queried kittens in MongoDB using Mongoose. Head over to the \n          a(href=\"guide.html\") guide\n          | , or \n          a(href=\"api.html\") api docs\n          |  for more.\n    script.\n      document.body.className = 'load';\n    include includes/googleanalytics\n"]],"start1":0,"start2":0,"length1":0,"length2":5357}]],"length":5357}
